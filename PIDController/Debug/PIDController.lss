
PIDController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00001520  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800110  00800110  00001664  2**0
                  ALLOC
  3 .stab         000056ac  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024b8  00000000  00000000  00006d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000091c8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 09 	call	0x124c	; 0x124c <main>
      8a:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
      92:	61 15       	cp	r22, r1
      94:	71 05       	cpc	r23, r1
      96:	b9 f0       	breq	.+46     	; 0xc6 <crc8+0x34>
      98:	e8 2f       	mov	r30, r24
      9a:	f9 2f       	mov	r31, r25
#include <stdint.h>

#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data, uint16_t number_of_bytes_in_data )
      9c:	6e 0f       	add	r22, r30
      9e:	7f 1f       	adc	r23, r31
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
      a0:	80 e0       	ldi	r24, 0x00	; 0

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
      a2:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
      a4:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
      a6:	21 91       	ld	r18, Z+
      a8:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
      aa:	32 2f       	mov	r19, r18
      ac:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
      ae:	30 ff       	sbrs	r19, 0
      b0:	0c c0       	rjmp	.+24     	; 0xca <crc8+0x38>
				crc = crc ^ CRC8POLY;
      b2:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
      b4:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
      b6:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
      b8:	26 95       	lsr	r18
      ba:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
      bc:	b1 f7       	brne	.-20     	; 0xaa <crc8+0x18>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
      be:	e6 17       	cp	r30, r22
      c0:	f7 07       	cpc	r31, r23
      c2:	89 f7       	brne	.-30     	; 0xa6 <crc8+0x14>
      c4:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
      ca:	86 95       	lsr	r24
      cc:	f5 cf       	rjmp	.-22     	; 0xb8 <crc8+0x26>

000000ce <util_create_addr>:
//	new_addr |= (addr & 0x20) << DATA_D5;
//	new_addr |= (addr & 0x40) << DATA_D6;
//	new_addr |= (addr & 0x80) << DATA_D7;

	return addr;
}
      ce:	08 95       	ret

000000d0 <ds12887_read_address>:

uint8_t ds12887_read_address(uint8_t addr)
{
	uint8_t sec = 0x0a;
	DDRC = 0xFF;
      d0:	9f ef       	ldi	r25, 0xFF	; 255
      d2:	94 bb       	out	0x14, r25	; 20
	 // rtc_tris=0b11100000;//set the tris of C for setting address
	  //rtc_tris.ad=0x00; //set the tris of D for setting address
	  //rtc     =0b00011110;//set C for for setting address
	PORTB |= _BV(CTRL_AS);
      d4:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= _BV(CTRL_RW);
      d6:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= _BV(CTRL_DS);
      d8:	c0 9a       	sbi	0x18, 0	; 24
//	  rtc.ad=addr;      //put address on bus
	PORTC = addr;
      da:	85 bb       	out	0x15, r24	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	fc 01       	movw	r30, r24
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <ds12887_read_address+0x12>
//	  rtc.ad=addr;      //put address on bus
	PORTC = addr;
	_delayFourCycles(1);
//	  #asm nop #endasm    //pause
//	rtc.as=0;           //latch
	PORTB &= ~(_BV(CTRL_AS));
      e6:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      e8:	fc 01       	movw	r30, r24
      ea:	31 97       	sbiw	r30, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <ds12887_read_address+0x1a>
//	  #asm nop #endasm    //pause
//	rtc.as=0;           //latch
	PORTB &= ~(_BV(CTRL_AS));
	_delayFourCycles(1); // pause
//	  rtc_tris.ad=0xFF; //set the tris of D for reading data
	PORTC = 0x00;
      ee:	15 ba       	out	0x15, r1	; 21
	DDRC = 0x00;
      f0:	14 ba       	out	0x14, r1	; 20

//	  rtc.ds=0;           //release
	  PORTB &= ~(_BV(CTRL_DS));
      f2:	c0 98       	cbi	0x18, 0	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      f4:	01 97       	sbiw	r24, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <ds12887_read_address+0x24>
//	  rtc.ds=0;           //release
	  PORTB &= ~(_BV(CTRL_DS));
//	  #asm nop #endasm    //pause
	  _delayFourCycles(1);
//	  data=rtc.ad;      //read the data from the bus
	  sec = PINC;
      f8:	83 b3       	in	r24, 0x13	; 19
//	_delay_us(1);

//	PORTE &= ~(_BV(CTRL_RW));

	return sec;
}
      fa:	08 95       	ret

000000fc <ds12887_read_ds_control_d>:
	return ds12887_write_address(data,DS_CONTROL_B);
}

uint8_t ds12887_read_ds_control_d()
{
	return ds12887_read_address(DS_CONTROL_D);
      fc:	80 eb       	ldi	r24, 0xB0	; 176
      fe:	0e 94 68 00 	call	0xd0	; 0xd0 <ds12887_read_address>
}
     102:	08 95       	ret

00000104 <ds12887_read_ds_control_b>:
	return ds12887_write_address(data,DS_CONTROL_A);
}

uint8_t ds12887_read_ds_control_b()
{
	return ds12887_read_address(DS_CONTROL_B);
     104:	80 ed       	ldi	r24, 0xD0	; 208
     106:	0e 94 68 00 	call	0xd0	; 0xd0 <ds12887_read_address>
}
     10a:	08 95       	ret

0000010c <ds12887_read_ds_control_a>:
//
//void ds12887_read_minute();

uint8_t ds12887_read_ds_control_a()
{
	return ds12887_read_address(DS_CONTROL_A);
     10c:	80 e5       	ldi	r24, 0x50	; 80
     10e:	0e 94 68 00 	call	0xd0	; 0xd0 <ds12887_read_address>
}
     112:	08 95       	ret

00000114 <ds12887_read_sec>:
}

uint8_t ds12887_read_sec()
{
	//set address on data port pins
	return ds12887_read_address(DS_SECONDS);
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 68 00 	call	0xd0	; 0xd0 <ds12887_read_address>


}
     11a:	08 95       	ret

0000011c <ds12887_write_address>:


uint8_t ds12887_write_address(uint8_t data, uint8_t addr)
{
	//set dataport to output to write adress
	DDRC = 0xFF;
     11c:	9f ef       	ldi	r25, 0xFF	; 255
     11e:	94 bb       	out	0x14, r25	; 20
	//_delay_us(1);

//	rtc_tris_w();
//	  rtc.cs_bar=0;//chip active
//	  rtc.ad=addr; //addr is on bus
	  PORTC = addr;//util_create_addr(addr);
     120:	65 bb       	out	0x15, r22	; 21
//	  rtc.rw_bar=0;//write mode
	  PORTB &= ~(_BV(CTRL_RW));
     122:	c1 98       	cbi	0x18, 1	; 24

//	  rtc.ds=0;    //data strob idle
	  PORTB &= ~(_BV(CTRL_DS));
     124:	c0 98       	cbi	0x18, 0	; 24

//	  rtc.as=1;    //addr strob
	  PORTB |= _BV(CTRL_AS);
     126:	c2 9a       	sbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     128:	21 e0       	ldi	r18, 0x01	; 1
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	31 97       	sbiw	r30, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <ds12887_write_address+0x12>
	  PORTB |= _BV(CTRL_AS);

	  _delayFourCycles(1); // pause

//	  rtc.as=0;    //latch address
	  PORTB &= ~(_BV(CTRL_AS));
     132:	c2 98       	cbi	0x18, 2	; 24

//	  rtc.ds=1;    //data strob idle
	  PORTB |= _BV(CTRL_DS);
     134:	c0 9a       	sbi	0x18, 0	; 24

//	  rtc.ad=data; //data is on bus
	  PORTC = data;
     136:	85 bb       	out	0x15, r24	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     138:	c9 01       	movw	r24, r18
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <ds12887_write_address+0x1e>

//	  rtc.ad=data; //data is on bus
	  PORTC = data;
	  _delayFourCycles(1);
//	  rtc.ds=0;    //latch data
	  PORTB &= ~(_BV(CTRL_DS));
     13e:	c0 98       	cbi	0x18, 0	; 24

//	  rtc_tris_r(); //set the tris of C  and D to ALL INPUTS
	  DDRC = 0x00;
     140:	14 ba       	out	0x14, r1	; 20

	//_delay_us(1);


	return 0;
}
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	08 95       	ret

00000146 <ds12887_write_ds_control_b>:
	return ds12887_read_address(DS_CONTROL_B);
}

uint8_t ds12887_write_ds_control_b(uint8_t data)
{
	return ds12887_write_address(data,DS_CONTROL_B);
     146:	60 ed       	ldi	r22, 0xD0	; 208
     148:	0e 94 8e 00 	call	0x11c	; 0x11c <ds12887_write_address>
}
     14c:	08 95       	ret

0000014e <ds12887_write_ds_control_a>:
	return ds12887_read_address(DS_CONTROL_A);
}

uint8_t ds12887_write_ds_control_a(uint8_t data)
{
	return ds12887_write_address(data,DS_CONTROL_A);
     14e:	60 e5       	ldi	r22, 0x50	; 80
     150:	0e 94 8e 00 	call	0x11c	; 0x11c <ds12887_write_address>
}
     154:	08 95       	ret

00000156 <ds12887_init>:
    	    : "0" (__count)
    	   );
}

void ds12887_init()
{
     156:	cf 93       	push	r28
	uint8_t data = 0x00;
	//set ctrl port to outpu
	DDR(CTRL_PORT)  |= _BV(CTRL_AS);
     158:	8a 9a       	sbi	0x11, 2	; 17
    DDR(CTRL_PORT)  |= _BV(CTRL_DS);
     15a:	88 9a       	sbi	0x11, 0	; 17
    DDR(CTRL_PORT)  |= _BV(CTRL_RW);
     15c:	89 9a       	sbi	0x11, 1	; 17
//	PORTC &= ~(_BV(CTRL_DS));
//	PORTC &= ~(_BV(CTRL_RW));

    //start oscillator and set in BCM mode
    do{
    	data = ds12887_read_ds_control_a();
     15e:	0e 94 86 00 	call	0x10c	; 0x10c <ds12887_read_ds_control_a>
    }while(data & DS_A_UIP);
     162:	88 23       	and	r24, r24
     164:	e4 f3       	brlt	.-8      	; 0x15e <ds12887_init+0x8>

    data = ds12887_read_ds_control_d();
     166:	0e 94 7e 00 	call	0xfc	; 0xfc <ds12887_read_ds_control_d>
    if(data & DS_D_VRT)
     16a:	88 23       	and	r24, r24
     16c:	2c f4       	brge	.+10     	; 0x178 <ds12887_init+0x22>
    	lcd_puts("vrt OK");
     16e:	82 e6       	ldi	r24, 0x62	; 98
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
     176:	04 c0       	rjmp	.+8      	; 0x180 <ds12887_init+0x2a>
    else
    	lcd_puts("vrt bad");
     178:	89 e6       	ldi	r24, 0x69	; 105
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>

    data &= ~(DS_A_DV0 | DS_A_DV1 | DS_A_DV2);
    data |= DS_A_DV1;
    data = 0xF4;
    ds12887_write_ds_control_a(data);
     180:	84 ef       	ldi	r24, 0xF4	; 244
     182:	0e 94 a7 00 	call	0x14e	; 0x14e <ds12887_write_ds_control_a>

    data = ds12887_read_ds_control_a();
     186:	0e 94 86 00 	call	0x10c	; 0x10c <ds12887_read_ds_control_a>
     18a:	c8 2f       	mov	r28, r24
    lcd_gotoxy(0,1);
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
    lcd_puts("ca:");
     194:	81 e7       	ldi	r24, 0x71	; 113
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
    lcd_put_num(data);
     19c:	8c 2f       	mov	r24, r28
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <lcd_put_num>
    data = 0x00;
    //data = ds12887_read_ds_control_b();
   	/* Switch to binary mode from BCD */
   	data &= ~(DS_B_DM);
   	data |= DS_B_SQWE;
   	ds12887_write_ds_control_b(data);
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	0e 94 a3 00 	call	0x146	; 0x146 <ds12887_write_ds_control_b>
}
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <DS18X20_raw_to_decicelsius>:

#if DS18X20_DECICELSIUS

/* convert scratchpad data to physical value in unit decicelsius */
static int16_t DS18X20_raw_to_decicelsius( uint8_t familycode, uint8_t sp[] )
{
     1ae:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int16_t  decicelsius;
	uint16_t fract;

	measure = sp[0] | (sp[1] << 8);
     1b0:	31 81       	ldd	r19, Z+1	; 0x01
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	90 81       	ld	r25, Z
     1b6:	29 2b       	or	r18, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
     1b8:	80 31       	cpi	r24, 0x10	; 16
     1ba:	79 f4       	brne	.+30     	; 0x1da <DS18X20_raw_to_decicelsius+0x2c>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
     1bc:	2e 7f       	andi	r18, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
     1be:	a9 01       	movw	r20, r18
     1c0:	44 0f       	add	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	44 0f       	add	r20, r20
     1ca:	55 1f       	adc	r21, r21
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
     1cc:	96 81       	ldd	r25, Z+6	; 0x06
     1ce:	2c e0       	ldi	r18, 0x0C	; 12
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	29 1b       	sub	r18, r25
     1d4:	31 09       	sbc	r19, r1
     1d6:	24 0f       	add	r18, r20
     1d8:	35 1f       	adc	r19, r21
	}

	// check for negative 
	if ( measure & 0x8000 )  {
     1da:	33 23       	and	r19, r19
     1dc:	2c f4       	brge	.+10     	; 0x1e8 <DS18X20_raw_to_decicelsius+0x3a>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
     1de:	31 95       	neg	r19
     1e0:	21 95       	neg	r18
     1e2:	31 09       	sbc	r19, r1
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <DS18X20_raw_to_decicelsius+0x3c>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
     1e8:	60 e0       	ldi	r22, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
     1ea:	88 32       	cpi	r24, 0x28	; 40
     1ec:	11 f0       	breq	.+4      	; 0x1f2 <DS18X20_raw_to_decicelsius+0x44>
     1ee:	82 32       	cpi	r24, 0x22	; 34
     1f0:	69 f4       	brne	.+26     	; 0x20c <DS18X20_raw_to_decicelsius+0x5e>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
     1f2:	84 81       	ldd	r24, Z+4	; 0x04
     1f4:	80 76       	andi	r24, 0x60	; 96
     1f6:	80 32       	cpi	r24, 0x20	; 32
     1f8:	31 f0       	breq	.+12     	; 0x206 <DS18X20_raw_to_decicelsius+0x58>
     1fa:	80 34       	cpi	r24, 0x40	; 64
     1fc:	31 f0       	breq	.+12     	; 0x20a <DS18X20_raw_to_decicelsius+0x5c>
     1fe:	81 11       	cpse	r24, r1
     200:	05 c0       	rjmp	.+10     	; 0x20c <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
     202:	28 7f       	andi	r18, 0xF8	; 248
			break;
     204:	03 c0       	rjmp	.+6      	; 0x20c <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
     206:	2c 7f       	andi	r18, 0xFC	; 252
			break;
     208:	01 c0       	rjmp	.+2      	; 0x20c <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
     20a:	2e 7f       	andi	r18, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	decicelsius = (measure >> 4);
     20c:	c9 01       	movw	r24, r18
     20e:	92 95       	swap	r25
     210:	82 95       	swap	r24
     212:	8f 70       	andi	r24, 0x0F	; 15
     214:	89 27       	eor	r24, r25
     216:	9f 70       	andi	r25, 0x0F	; 15
     218:	89 27       	eor	r24, r25
	decicelsius *= 10;
     21a:	ac 01       	movw	r20, r24
     21c:	44 0f       	add	r20, r20
     21e:	55 1f       	adc	r21, r21
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	84 0f       	add	r24, r20
     22e:	95 1f       	adc	r25, r21

	// decicelsius += ((measure & 0x000F) * 640 + 512) / 1024;
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
     230:	2f 70       	andi	r18, 0x0F	; 15
     232:	33 27       	eor	r19, r19
     234:	a9 01       	movw	r20, r18
     236:	56 95       	lsr	r21
     238:	54 2f       	mov	r21, r20
     23a:	44 27       	eor	r20, r20
     23c:	57 95       	ror	r21
     23e:	47 95       	ror	r20
     240:	32 2f       	mov	r19, r18
     242:	22 27       	eor	r18, r18
     244:	33 0f       	add	r19, r19
     246:	24 0f       	add	r18, r20
     248:	35 1f       	adc	r19, r21
	if ( !negative ) {
     24a:	61 11       	cpse	r22, r1
     24c:	12 c0       	rjmp	.+36     	; 0x272 <DS18X20_raw_to_decicelsius+0xc4>
		fract += 512;
     24e:	3e 5f       	subi	r19, 0xFE	; 254
	}
	fract /= 1024;
     250:	23 2f       	mov	r18, r19
     252:	33 27       	eor	r19, r19
     254:	26 95       	lsr	r18
     256:	26 95       	lsr	r18
	decicelsius += fract;
     258:	28 0f       	add	r18, r24
     25a:	39 1f       	adc	r19, r25

	if ( negative ) {
		decicelsius = -decicelsius;
	}

	if ( /* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250 ) {
     25c:	c9 01       	movw	r24, r18
     25e:	8a 5d       	subi	r24, 0xDA	; 218
     260:	9d 4f       	sbci	r25, 0xFD	; 253
     262:	89 30       	cpi	r24, 0x09	; 9
     264:	97 40       	sbci	r25, 0x07	; 7
     266:	10 f0       	brcs	.+4      	; 0x26c <DS18X20_raw_to_decicelsius+0xbe>
		return DS18X20_INVALID_DECICELSIUS;
     268:	20 ed       	ldi	r18, 0xD0	; 208
     26a:	37 e0       	ldi	r19, 0x07	; 7
     26c:	82 2f       	mov	r24, r18
     26e:	93 2f       	mov	r25, r19
     270:	08 95       	ret
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
	if ( !negative ) {
		fract += 512;
	}
	fract /= 1024;
     272:	23 2f       	mov	r18, r19
     274:	33 27       	eor	r19, r19
     276:	26 95       	lsr	r18
     278:	26 95       	lsr	r18
	decicelsius += fract;
     27a:	82 0f       	add	r24, r18
     27c:	93 1f       	adc	r25, r19

	if ( negative ) {
		decicelsius = -decicelsius;
     27e:	22 27       	eor	r18, r18
     280:	33 27       	eor	r19, r19
     282:	28 1b       	sub	r18, r24
     284:	39 0b       	sbc	r19, r25
     286:	ea cf       	rjmp	.-44     	; 0x25c <DS18X20_raw_to_decicelsius+0xae>

00000288 <DS18X20_raw_to_maxres>:


#if DS18X20_MAX_RESOLUTION

static int32_t DS18X20_raw_to_maxres( uint8_t familycode, uint8_t sp[] )
{
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int32_t  temperaturevalue;

	measure = sp[0] | (sp[1] << 8);
     298:	51 81       	ldd	r21, Z+1	; 0x01
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	90 81       	ld	r25, Z
     29e:	49 2b       	or	r20, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
     2a0:	80 31       	cpi	r24, 0x10	; 16
     2a2:	79 f4       	brne	.+30     	; 0x2c2 <DS18X20_raw_to_maxres+0x3a>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
     2a4:	4e 7f       	andi	r20, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
     2a6:	9a 01       	movw	r18, r20
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	22 0f       	add	r18, r18
     2ae:	33 1f       	adc	r19, r19
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
		measure += ( 16 - sp[6] ) - 4; // Add the compensation and remember to subtract 0.25 degree (4/16)
     2b4:	96 81       	ldd	r25, Z+6	; 0x06
     2b6:	4c e0       	ldi	r20, 0x0C	; 12
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	49 1b       	sub	r20, r25
     2bc:	51 09       	sbc	r21, r1
     2be:	42 0f       	add	r20, r18
     2c0:	53 1f       	adc	r21, r19
	}

	// check for negative 
	if ( measure & 0x8000 )  {
     2c2:	55 23       	and	r21, r21
     2c4:	2c f4       	brge	.+10     	; 0x2d0 <DS18X20_raw_to_maxres+0x48>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
     2c6:	51 95       	neg	r21
     2c8:	41 95       	neg	r20
     2ca:	51 09       	sbc	r21, r1
		measure += ( 16 - sp[6] ) - 4; // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
     2cc:	c1 e0       	ldi	r28, 0x01	; 1
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <DS18X20_raw_to_maxres+0x4a>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
     2d0:	c0 e0       	ldi	r28, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
     2d2:	88 32       	cpi	r24, 0x28	; 40
     2d4:	11 f0       	breq	.+4      	; 0x2da <DS18X20_raw_to_maxres+0x52>
     2d6:	82 32       	cpi	r24, 0x22	; 34
     2d8:	69 f4       	brne	.+26     	; 0x2f4 <DS18X20_raw_to_maxres+0x6c>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
     2da:	84 81       	ldd	r24, Z+4	; 0x04
     2dc:	80 76       	andi	r24, 0x60	; 96
     2de:	80 32       	cpi	r24, 0x20	; 32
     2e0:	31 f0       	breq	.+12     	; 0x2ee <DS18X20_raw_to_maxres+0x66>
     2e2:	80 34       	cpi	r24, 0x40	; 64
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <DS18X20_raw_to_maxres+0x6a>
     2e6:	81 11       	cpse	r24, r1
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <DS18X20_raw_to_maxres+0x6c>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
     2ea:	48 7f       	andi	r20, 0xF8	; 248
			break;
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <DS18X20_raw_to_maxres+0x6c>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
     2ee:	4c 7f       	andi	r20, 0xFC	; 252
			break;
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <DS18X20_raw_to_maxres+0x6c>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
     2f2:	4e 7f       	andi	r20, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	temperaturevalue  = (measure >> 4);
     2f4:	9a 01       	movw	r18, r20
     2f6:	32 95       	swap	r19
     2f8:	22 95       	swap	r18
     2fa:	2f 70       	andi	r18, 0x0F	; 15
     2fc:	23 27       	eor	r18, r19
     2fe:	3f 70       	andi	r19, 0x0F	; 15
     300:	23 27       	eor	r18, r19
	temperaturevalue *= 10000;
     302:	a0 e1       	ldi	r26, 0x10	; 16
     304:	b7 e2       	ldi	r27, 0x27	; 39
     306:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__umulhisi3>
	temperaturevalue +=( measure & 0x000F ) * DS18X20_FRACCONV;
     30a:	4f 70       	andi	r20, 0x0F	; 15
     30c:	55 27       	eor	r21, r21
     30e:	e1 e7       	ldi	r30, 0x71	; 113
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	4e 9f       	mul	r20, r30
     314:	90 01       	movw	r18, r0
     316:	4f 9f       	mul	r20, r31
     318:	30 0d       	add	r19, r0
     31a:	5e 9f       	mul	r21, r30
     31c:	30 0d       	add	r19, r0
     31e:	11 24       	eor	r1, r1
     320:	6b 01       	movw	r12, r22
     322:	7c 01       	movw	r14, r24
     324:	c2 0e       	add	r12, r18
     326:	d3 1e       	adc	r13, r19
     328:	e1 1c       	adc	r14, r1
     32a:	f1 1c       	adc	r15, r1
     32c:	97 01       	movw	r18, r14
     32e:	86 01       	movw	r16, r12

	if ( negative ) {
     330:	cc 23       	and	r28, r28
     332:	39 f0       	breq	.+14     	; 0x342 <DS18X20_raw_to_maxres+0xba>
		temperaturevalue = -temperaturevalue;
     334:	30 95       	com	r19
     336:	20 95       	com	r18
     338:	10 95       	com	r17
     33a:	01 95       	neg	r16
     33c:	1f 4f       	sbci	r17, 0xFF	; 255
     33e:	2f 4f       	sbci	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	return temperaturevalue;
}
     342:	60 2f       	mov	r22, r16
     344:	71 2f       	mov	r23, r17
     346:	82 2f       	mov	r24, r18
     348:	93 2f       	mov	r25, r19
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <read_scratchpad>:
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	e6 2e       	mov	r14, r22
     36a:	f7 2e       	mov	r15, r23
     36c:	d4 2e       	mov	r13, r20
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
     36e:	bc 01       	movw	r22, r24
     370:	8e eb       	ldi	r24, 0xBE	; 190
     372:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
	for ( i = 0; i < n; i++ ) {
     376:	dd 20       	and	r13, r13
     378:	71 f0       	breq	.+28     	; 0x396 <read_scratchpad+0x3c>
     37a:	ce 2d       	mov	r28, r14
     37c:	df 2d       	mov	r29, r15
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
     37e:	8e 01       	movw	r16, r28
     380:	0f 5f       	subi	r16, 0xFF	; 255
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	da 94       	dec	r13
     386:	0d 0d       	add	r16, r13
     388:	11 1d       	adc	r17, r1
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
		sp[i] = ow_byte_rd();
     38a:	0e 94 9a 06 	call	0xd34	; 0xd34 <ow_byte_rd>
     38e:	89 93       	st	Y+, r24
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
     390:	c0 17       	cp	r28, r16
     392:	d1 07       	cpc	r29, r17
     394:	d1 f7       	brne	.-12     	; 0x38a <read_scratchpad+0x30>
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
     396:	69 e0       	ldi	r22, 0x09	; 9
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	8e 2d       	mov	r24, r14
     39c:	9f 2d       	mov	r25, r15
     39e:	0e 94 49 00 	call	0x92	; 0x92 <crc8>
     3a2:	88 23       	and	r24, r24
     3a4:	11 f0       	breq	.+4      	; 0x3aa <read_scratchpad+0x50>
		ret = DS18X20_ERROR_CRC;
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <read_scratchpad+0x52>
	} else {
		ret = DS18X20_OK;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ret;
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	08 95       	ret

000003bc <DS18X20_find_sensor>:
/* find DS18X20 Sensors on 1-Wire-Bus
   input/ouput: diff is the result of the last rom-search
                *diff = OW_SEARCH_FIRST for first call
   output: id is the rom-code of the sensor found */
uint8_t DS18X20_find_sensor( uint8_t *diff, uint8_t id[] )
{
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	8b 01       	movw	r16, r22
	uint8_t ret;

	ret = DS18X20_OK;
	go = 1;
	do {
		*diff = ow_rom_search( *diff, &id[0] );
     3c8:	b8 01       	movw	r22, r16
     3ca:	88 81       	ld	r24, Y
     3cc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ow_rom_search>
     3d0:	88 83       	st	Y, r24
		if ( *diff == OW_PRESENCE_ERR || *diff == OW_DATA_ERR ||
     3d2:	81 50       	subi	r24, 0x01	; 1
     3d4:	8d 3f       	cpi	r24, 0xFD	; 253
     3d6:	50 f4       	brcc	.+20     	; 0x3ec <DS18X20_find_sensor+0x30>
		     *diff == OW_LAST_DEVICE ) { 
			go  = 0;
			ret = DS18X20_ERROR;
		} else {
			if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE ||
     3d8:	f8 01       	movw	r30, r16
     3da:	80 81       	ld	r24, Z
     3dc:	88 32       	cpi	r24, 0x28	; 40
     3de:	41 f0       	breq	.+16     	; 0x3f0 <DS18X20_find_sensor+0x34>
     3e0:	80 31       	cpi	r24, 0x10	; 16
     3e2:	41 f0       	breq	.+16     	; 0x3f4 <DS18X20_find_sensor+0x38>
     3e4:	82 32       	cpi	r24, 0x22	; 34
     3e6:	81 f7       	brne	.-32     	; 0x3c8 <DS18X20_find_sensor+0xc>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <DS18X20_find_sensor+0x3a>
	do {
		*diff = ow_rom_search( *diff, &id[0] );
		if ( *diff == OW_PRESENCE_ERR || *diff == OW_DATA_ERR ||
		     *diff == OW_LAST_DEVICE ) { 
			go  = 0;
			ret = DS18X20_ERROR;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <DS18X20_find_sensor+0x3a>
		} else {
			if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE ||
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <DS18X20_find_sensor+0x3a>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	} while (go);

	return ret;
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <DS18X20_get_power_status>:

/* get power status of DS18x20 
   input:   id = rom_code 
   returns: DS18X20_POWER_EXTERN or DS18X20_POWER_PARASITE */
uint8_t DS18X20_get_power_status( uint8_t id[] )
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
	uint8_t pstat;

	ow_reset();
     406:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	ow_command( DS18X20_READ_POWER_SUPPLY, id );
     40a:	be 01       	movw	r22, r28
     40c:	84 eb       	ldi	r24, 0xB4	; 180
     40e:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
	pstat = ow_bit_io( 1 );
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
     418:	c8 2f       	mov	r28, r24
	ow_reset();
     41a:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	return ( pstat ) ? DS18X20_POWER_EXTERN : DS18X20_POWER_PARASITE;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	c1 11       	cpse	r28, r1
     422:	01 c0       	rjmp	.+2      	; 0x426 <DS18X20_get_power_status+0x26>
     424:	80 e0       	ldi	r24, 0x00	; 0
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	18 2f       	mov	r17, r24
     434:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
     436:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     43a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ow_input_pin_state>
     43e:	88 23       	and	r24, r24
     440:	71 f0       	breq	.+28     	; 0x45e <DS18X20_start_meas+0x32>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
     442:	11 30       	cpi	r17, 0x01	; 1
     444:	31 f0       	breq	.+12     	; 0x452 <DS18X20_start_meas+0x26>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
     446:	be 01       	movw	r22, r28
     448:	84 e4       	ldi	r24, 0x44	; 68
     44a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <ow_command_with_parasite_enable>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
		}
		ret = DS18X20_OK;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	07 c0       	rjmp	.+14     	; 0x460 <DS18X20_start_meas+0x34>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
     452:	be 01       	movw	r22, r28
     454:	84 e4       	ldi	r24, 0x44	; 68
     456:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
		}
		ret = DS18X20_OK;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	01 c0       	rjmp	.+2      	; 0x460 <DS18X20_start_meas+0x34>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
     45e:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ret;
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <DS18X20_conversion_in_progress>:

// returns 1 if conversion is in progress, 0 if finished
// not available when parasite powered.
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	81 11       	cpse	r24, r1
     472:	90 e0       	ldi	r25, 0x00	; 0
}
     474:	89 2f       	mov	r24, r25
     476:	08 95       	ret

00000478 <DS18X20_format_from_decicelsius>:
/* format decicelsius-value into string, itoa method inspired 
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	27 97       	sbiw	r28, 0x07	; 7
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	8b 01       	movw	r16, r22
	uint8_t str_loc = 0;
	div_t dt;
	uint8_t ret;

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {
     496:	47 30       	cpi	r20, 0x07	; 7
     498:	08 f4       	brcc	.+2      	; 0x49c <DS18X20_format_from_decicelsius+0x24>
     49a:	5f c0       	rjmp	.+190    	; 0x55a <DS18X20_format_from_decicelsius+0xe2>
     49c:	89 31       	cpi	r24, 0x19	; 25
     49e:	2c ef       	ldi	r18, 0xFC	; 252
     4a0:	92 07       	cpc	r25, r18
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <DS18X20_format_from_decicelsius+0x2e>
     4a4:	5c c0       	rjmp	.+184    	; 0x55e <DS18X20_format_from_decicelsius+0xe6>
     4a6:	80 31       	cpi	r24, 0x10	; 16
     4a8:	27 e2       	ldi	r18, 0x27	; 39
     4aa:	92 07       	cpc	r25, r18
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <DS18X20_format_from_decicelsius+0x38>
     4ae:	59 c0       	rjmp	.+178    	; 0x562 <DS18X20_format_from_decicelsius+0xea>

		if ( decicelsius < 0) {
     4b0:	99 23       	and	r25, r25
     4b2:	34 f4       	brge	.+12     	; 0x4c0 <DS18X20_format_from_decicelsius+0x48>
			sign = 1;
			decicelsius = -decicelsius;
     4b4:	91 95       	neg	r25
     4b6:	81 95       	neg	r24
     4b8:	91 09       	sbc	r25, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
     4ba:	ee 24       	eor	r14, r14
     4bc:	e3 94       	inc	r14
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <DS18X20_format_from_decicelsius+0x4a>
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
	uint8_t sign = 0;
     4c0:	e1 2c       	mov	r14, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
     4c2:	f1 2c       	mov	r15, r1
			decicelsius = -decicelsius;
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
     4c4:	6a e0       	ldi	r22, 0x0A	; 10
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__divmodhi4>
			temp[temp_loc++] = dt.rem + '0';
     4cc:	e1 e0       	ldi	r30, 0x01	; 1
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ec 0f       	add	r30, r28
     4d2:	fd 1f       	adc	r31, r29
     4d4:	ef 0d       	add	r30, r15
     4d6:	f1 1d       	adc	r31, r1
     4d8:	f7 fc       	sbrc	r15, 7
     4da:	fa 95       	dec	r31
     4dc:	80 5d       	subi	r24, 0xD0	; 208
     4de:	80 83       	st	Z, r24
     4e0:	f3 94       	inc	r15
			decicelsius = dt.quot;
     4e2:	86 2f       	mov	r24, r22
     4e4:	97 2f       	mov	r25, r23
		} while ( decicelsius > 0 );
     4e6:	18 16       	cp	r1, r24
     4e8:	19 06       	cpc	r1, r25
     4ea:	64 f3       	brlt	.-40     	; 0x4c4 <DS18X20_format_from_decicelsius+0x4c>
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
			temp[temp_loc++] = dt.rem + '0';
     4ec:	8f 2d       	mov	r24, r15
			decicelsius = dt.quot;
		} while ( decicelsius > 0 );

		if ( sign ) {
     4ee:	ee 20       	and	r14, r14
     4f0:	59 f0       	breq	.+22     	; 0x508 <DS18X20_format_from_decicelsius+0x90>
			temp[temp_loc] = '-';
     4f2:	fe 01       	movw	r30, r28
     4f4:	ef 0d       	add	r30, r15
     4f6:	f1 1d       	adc	r31, r1
     4f8:	f7 fc       	sbrc	r15, 7
     4fa:	fa 95       	dec	r31
     4fc:	9d e2       	ldi	r25, 0x2D	; 45
     4fe:	91 83       	std	Z+1, r25	; 0x01
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     500:	88 23       	and	r24, r24
     502:	64 f4       	brge	.+24     	; 0x51c <DS18X20_format_from_decicelsius+0xa4>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	23 c0       	rjmp	.+70     	; 0x54e <DS18X20_format_from_decicelsius+0xd6>

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			///temp_loc--;
			temp[temp_loc] = '+';
     508:	fe 01       	movw	r30, r28
     50a:	ef 0d       	add	r30, r15
     50c:	f1 1d       	adc	r31, r1
     50e:	f7 fc       	sbrc	r15, 7
     510:	fa 95       	dec	r31
     512:	9b e2       	ldi	r25, 0x2B	; 43
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	f4 cf       	rjmp	.-24     	; 0x500 <DS18X20_format_from_decicelsius+0x88>
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     518:	89 2f       	mov	r24, r25
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DS18X20_format_from_decicelsius+0xa8>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     51c:	80 e0       	ldi	r24, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     51e:	2e e2       	ldi	r18, 0x2E	; 46
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     520:	f8 01       	movw	r30, r16
     522:	e8 0f       	add	r30, r24
     524:	f1 1d       	adc	r31, r1
     526:	a1 e0       	ldi	r26, 0x01	; 1
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ac 0f       	add	r26, r28
     52c:	bd 1f       	adc	r27, r29
     52e:	af 0d       	add	r26, r15
     530:	b1 1d       	adc	r27, r1
     532:	9c 91       	ld	r25, X
     534:	90 83       	st	Z, r25
     536:	98 2f       	mov	r25, r24
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	fa 94       	dec	r15
			if ( temp_loc == 0 ) {
     53c:	31 f4       	brne	.+12     	; 0x54a <DS18X20_format_from_decicelsius+0xd2>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     53e:	f8 01       	movw	r30, r16
     540:	e9 0f       	add	r30, r25
     542:	f1 1d       	adc	r31, r1
     544:	20 83       	st	Z, r18
     546:	8e 5f       	subi	r24, 0xFE	; 254
     548:	eb cf       	rjmp	.-42     	; 0x520 <DS18X20_format_from_decicelsius+0xa8>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     54a:	ff 20       	and	r15, r15
     54c:	2c f7       	brge	.-54     	; 0x518 <DS18X20_format_from_decicelsius+0xa0>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
     54e:	f8 01       	movw	r30, r16
     550:	e9 0f       	add	r30, r25
     552:	f1 1d       	adc	r31, r1
     554:	10 82       	st	Z, r1

		ret = DS18X20_OK;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	05 c0       	rjmp	.+10     	; 0x564 <DS18X20_format_from_decicelsius+0xec>
	} else {
		ret = DS18X20_ERROR;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	03 c0       	rjmp	.+6      	; 0x564 <DS18X20_format_from_decicelsius+0xec>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	01 c0       	rjmp	.+2      	; 0x564 <DS18X20_format_from_decicelsius+0xec>
     562:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
     564:	27 96       	adiw	r28, 0x07	; 7
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <DS18X20_read_decicelsius>:

/* reads temperature (scratchpad) of sensor with rom-code id
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius( uint8_t id[], int16_t *decicelsius )
{
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	29 97       	sbiw	r28, 0x09	; 9
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	8c 01       	movw	r16, r24
     59e:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ow_reset();
     5a0:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
     5a4:	49 e0       	ldi	r20, 0x09	; 9
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 ad 01 	call	0x35a	; 0x35a <read_scratchpad>
     5b2:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
     5b4:	81 11       	cpse	r24, r1
     5b6:	0a c0       	rjmp	.+20     	; 0x5cc <DS18X20_read_decicelsius+0x4e>
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	f8 01       	movw	r30, r16
     5c0:	80 81       	ld	r24, Z
     5c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DS18X20_raw_to_decicelsius>
     5c6:	f7 01       	movw	r30, r14
     5c8:	91 83       	std	Z+1, r25	; 0x01
     5ca:	80 83       	st	Z, r24
	}
	return ret;
}
     5cc:	8d 2d       	mov	r24, r13
     5ce:	29 96       	adiw	r28, 0x09	; 9
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	08 95       	ret

000005ea <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	29 97       	sbiw	r28, 0x09	; 9
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	e8 2e       	mov	r14, r24
     608:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     60a:	49 e0       	ldi	r20, 0x09	; 9
     60c:	be 01       	movw	r22, r28
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 ad 01 	call	0x35a	; 0x35a <read_scratchpad>
     61a:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
     61c:	81 11       	cpse	r24, r1
     61e:	09 c0       	rjmp	.+18     	; 0x632 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	8e 2d       	mov	r24, r14
     628:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DS18X20_raw_to_decicelsius>
     62c:	f8 01       	movw	r30, r16
     62e:	91 83       	std	Z+1, r25	; 0x01
     630:	80 83       	st	Z, r24
	}
	return ret;
}
     632:	8f 2d       	mov	r24, r15
     634:	29 96       	adiw	r28, 0x09	; 9
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	08 95       	ret

0000064e <DS18X20_read_maxres>:

	return temperaturevalue;
}

uint8_t DS18X20_read_maxres( uint8_t id[], int32_t *temperaturevalue )
{
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	29 97       	sbiw	r28, 0x09	; 9
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	8c 01       	movw	r16, r24
     66e:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ow_reset();
     670:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
     674:	49 e0       	ldi	r20, 0x09	; 9
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 ad 01 	call	0x35a	; 0x35a <read_scratchpad>
     682:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
     684:	81 11       	cpse	r24, r1
     686:	0c c0       	rjmp	.+24     	; 0x6a0 <DS18X20_read_maxres+0x52>
		*temperaturevalue = DS18X20_raw_to_maxres( id[0], sp );
     688:	be 01       	movw	r22, r28
     68a:	6f 5f       	subi	r22, 0xFF	; 255
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	f8 01       	movw	r30, r16
     690:	80 81       	ld	r24, Z
     692:	0e 94 44 01 	call	0x288	; 0x288 <DS18X20_raw_to_maxres>
     696:	f7 01       	movw	r30, r14
     698:	60 83       	st	Z, r22
     69a:	71 83       	std	Z+1, r23	; 0x01
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	93 83       	std	Z+3, r25	; 0x03
	}
	return ret;
}
     6a0:	8d 2d       	mov	r24, r13
     6a2:	29 96       	adiw	r28, 0x09	; 9
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	08 95       	ret

000006be <DS18X20_read_maxres_single>:

uint8_t DS18X20_read_maxres_single( uint8_t familycode, int32_t *temperaturevalue )
{
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	29 97       	sbiw	r28, 0x09	; 9
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	e8 2e       	mov	r14, r24
     6dc:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     6de:	49 e0       	ldi	r20, 0x09	; 9
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 ad 01 	call	0x35a	; 0x35a <read_scratchpad>
     6ee:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
     6f0:	81 11       	cpse	r24, r1
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <DS18X20_read_maxres_single+0x4c>
		*temperaturevalue = DS18X20_raw_to_maxres( familycode, sp );
     6f4:	be 01       	movw	r22, r28
     6f6:	6f 5f       	subi	r22, 0xFF	; 255
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	8e 2d       	mov	r24, r14
     6fc:	0e 94 44 01 	call	0x288	; 0x288 <DS18X20_raw_to_maxres>
     700:	f8 01       	movw	r30, r16
     702:	60 83       	st	Z, r22
     704:	71 83       	std	Z+1, r23	; 0x01
     706:	82 83       	std	Z+2, r24	; 0x02
     708:	93 83       	std	Z+3, r25	; 0x03
	}
	return ret;

}
     70a:	8f 2d       	mov	r24, r15
     70c:	29 96       	adiw	r28, 0x09	; 9
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	08 95       	ret

00000726 <DS18X20_format_from_maxres>:

uint8_t DS18X20_format_from_maxres( int32_t temperaturevalue, char str[], uint8_t n)
{
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	6a 97       	sbiw	r28, 0x1a	; 26
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	8a 01       	movw	r16, r20
	uint8_t str_loc = 0;
	ldiv_t ldt;
	uint8_t ret;

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {
     746:	2a 30       	cpi	r18, 0x0A	; 10
     748:	08 f4       	brcc	.+2      	; 0x74c <DS18X20_format_from_maxres+0x26>
     74a:	94 c0       	rjmp	.+296    	; 0x874 <__stack+0x15>
     74c:	61 3c       	cpi	r22, 0xC1	; 193
     74e:	2d eb       	ldi	r18, 0xBD	; 189
     750:	72 07       	cpc	r23, r18
     752:	20 ef       	ldi	r18, 0xF0	; 240
     754:	82 07       	cpc	r24, r18
     756:	2f ef       	ldi	r18, 0xFF	; 255
     758:	92 07       	cpc	r25, r18
     75a:	0c f4       	brge	.+2      	; 0x75e <DS18X20_format_from_maxres+0x38>
     75c:	8d c0       	rjmp	.+282    	; 0x878 <__stack+0x19>
     75e:	60 38       	cpi	r22, 0x80	; 128
     760:	26 e9       	ldi	r18, 0x96	; 150
     762:	72 07       	cpc	r23, r18
     764:	28 e9       	ldi	r18, 0x98	; 152
     766:	82 07       	cpc	r24, r18
     768:	91 05       	cpc	r25, r1
     76a:	0c f0       	brlt	.+2      	; 0x76e <DS18X20_format_from_maxres+0x48>
     76c:	87 c0       	rjmp	.+270    	; 0x87c <__stack+0x1d>

		if ( temperaturevalue < 0) {
     76e:	99 23       	and	r25, r25
     770:	54 f4       	brge	.+20     	; 0x786 <DS18X20_format_from_maxres+0x60>
			sign = 1;
			temperaturevalue = -temperaturevalue;
     772:	90 95       	com	r25
     774:	80 95       	com	r24
     776:	70 95       	com	r23
     778:	61 95       	neg	r22
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	8f 4f       	sbci	r24, 0xFF	; 255
     77e:	9f 4f       	sbci	r25, 0xFF	; 255

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {

		if ( temperaturevalue < 0) {
			sign = 1;
     780:	ee 24       	eor	r14, r14
     782:	e3 94       	inc	r14
     784:	01 c0       	rjmp	.+2      	; 0x788 <DS18X20_format_from_maxres+0x62>

}

uint8_t DS18X20_format_from_maxres( int32_t temperaturevalue, char str[], uint8_t n)
{
	uint8_t sign = 0;
     786:	e1 2c       	mov	r14, r1

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {

		if ( temperaturevalue < 0) {
			sign = 1;
     788:	f1 2c       	mov	r15, r1
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
     78a:	68 94       	set
     78c:	dd 24       	eor	r13, r13
     78e:	d3 f8       	bld	r13, 3
     790:	01 c0       	rjmp	.+2      	; 0x794 <DS18X20_format_from_maxres+0x6e>
			temp[temp_loc++] = ldt.rem + '0';
     792:	f2 2e       	mov	r15, r18
			sign = 1;
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
     794:	2a e0       	ldi	r18, 0x0A	; 10
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	0e 94 08 0a 	call	0x1410	; 0x1410 <__divmodsi4>
     7a0:	2b 8b       	std	Y+19, r18	; 0x13
     7a2:	3c 8b       	std	Y+20, r19	; 0x14
     7a4:	4d 8b       	std	Y+21, r20	; 0x15
     7a6:	5e 8b       	std	Y+22, r21	; 0x16
     7a8:	6f 8b       	std	Y+23, r22	; 0x17
     7aa:	78 8f       	std	Y+24, r23	; 0x18
     7ac:	89 8f       	std	Y+25, r24	; 0x19
     7ae:	9a 8f       	std	Y+26, r25	; 0x1a
     7b0:	fe 01       	movw	r30, r28
     7b2:	73 96       	adiw	r30, 0x13	; 19
     7b4:	de 01       	movw	r26, r28
     7b6:	1b 96       	adiw	r26, 0x0b	; 11
     7b8:	8d 2d       	mov	r24, r13
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	8a 95       	dec	r24
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <DS18X20_format_from_maxres+0x94>
			temp[temp_loc++] = ldt.rem + '0';
     7c2:	e1 e0       	ldi	r30, 0x01	; 1
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	ec 0f       	add	r30, r28
     7c8:	fd 1f       	adc	r31, r29
     7ca:	ef 0d       	add	r30, r15
     7cc:	f1 1d       	adc	r31, r1
     7ce:	f7 fc       	sbrc	r15, 7
     7d0:	fa 95       	dec	r31
     7d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d4:	80 5d       	subi	r24, 0xD0	; 208
     7d6:	80 83       	st	Z, r24
     7d8:	2f 2d       	mov	r18, r15
     7da:	2f 5f       	subi	r18, 0xFF	; 255
			temperaturevalue = ldt.quot;
     7dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     7de:	7c 85       	ldd	r23, Y+12	; 0x0c
     7e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e2:	9e 85       	ldd	r25, Y+14	; 0x0e
		} while ( temperaturevalue > 0 );
     7e4:	16 16       	cp	r1, r22
     7e6:	17 06       	cpc	r1, r23
     7e8:	18 06       	cpc	r1, r24
     7ea:	19 06       	cpc	r1, r25
     7ec:	94 f2       	brlt	.-92     	; 0x792 <DS18X20_format_from_maxres+0x6c>
		
		// mk 20110209
		if ((temp_loc < 4)&&(temp_loc > 1)) {
     7ee:	82 2f       	mov	r24, r18
     7f0:	82 50       	subi	r24, 0x02	; 2
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	40 f4       	brcc	.+16     	; 0x806 <DS18X20_format_from_maxres+0xe0>
			temp[temp_loc++] = '0';
     7f6:	fe 01       	movw	r30, r28
     7f8:	e2 0f       	add	r30, r18
     7fa:	f1 1d       	adc	r31, r1
     7fc:	27 fd       	sbrc	r18, 7
     7fe:	fa 95       	dec	r31
     800:	80 e3       	ldi	r24, 0x30	; 48
     802:	81 83       	std	Z+1, r24	; 0x01
     804:	2f 5f       	subi	r18, 0xFF	; 255
		} // mk end

		if ( sign ) {
     806:	ee 20       	and	r14, r14
     808:	59 f0       	breq	.+22     	; 0x820 <DS18X20_format_from_maxres+0xfa>
			temp[temp_loc] = '-';
     80a:	fe 01       	movw	r30, r28
     80c:	e2 0f       	add	r30, r18
     80e:	f1 1d       	adc	r31, r1
     810:	27 fd       	sbrc	r18, 7
     812:	fa 95       	dec	r31
     814:	8d e2       	ldi	r24, 0x2D	; 45
     816:	81 83       	std	Z+1, r24	; 0x01
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     818:	22 23       	and	r18, r18
     81a:	64 f4       	brge	.+24     	; 0x834 <DS18X20_format_from_maxres+0x10e>
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	24 c0       	rjmp	.+72     	; 0x868 <__stack+0x9>
		} // mk end

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
     820:	fe 01       	movw	r30, r28
     822:	e2 0f       	add	r30, r18
     824:	f1 1d       	adc	r31, r1
     826:	27 fd       	sbrc	r18, 7
     828:	fa 95       	dec	r31
     82a:	8b e2       	ldi	r24, 0x2B	; 43
     82c:	81 83       	std	Z+1, r24	; 0x01
     82e:	f4 cf       	rjmp	.-24     	; 0x818 <DS18X20_format_from_maxres+0xf2>
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
			temp[temp_loc++] = ldt.rem + '0';
     830:	89 2f       	mov	r24, r25
     832:	02 c0       	rjmp	.+4      	; 0x838 <DS18X20_format_from_maxres+0x112>
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     834:	80 e0       	ldi	r24, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 3 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     836:	3e e2       	ldi	r19, 0x2E	; 46
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     838:	f8 01       	movw	r30, r16
     83a:	e8 0f       	add	r30, r24
     83c:	f1 1d       	adc	r31, r1
     83e:	a1 e0       	ldi	r26, 0x01	; 1
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	ac 0f       	add	r26, r28
     844:	bd 1f       	adc	r27, r29
     846:	a2 0f       	add	r26, r18
     848:	b1 1d       	adc	r27, r1
     84a:	9c 91       	ld	r25, X
     84c:	90 83       	st	Z, r25
     84e:	98 2f       	mov	r25, r24
     850:	9f 5f       	subi	r25, 0xFF	; 255
     852:	21 50       	subi	r18, 0x01	; 1
			if ( temp_loc == 3 ) {
     854:	23 30       	cpi	r18, 0x03	; 3
     856:	31 f4       	brne	.+12     	; 0x864 <__stack+0x5>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     858:	f8 01       	movw	r30, r16
     85a:	e9 0f       	add	r30, r25
     85c:	f1 1d       	adc	r31, r1
     85e:	30 83       	st	Z, r19
     860:	9f 5f       	subi	r25, 0xFF	; 255
     862:	e6 cf       	rjmp	.-52     	; 0x830 <DS18X20_format_from_maxres+0x10a>
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     864:	22 23       	and	r18, r18
     866:	24 f7       	brge	.-56     	; 0x830 <DS18X20_format_from_maxres+0x10a>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 3 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
     868:	f8 01       	movw	r30, r16
     86a:	e9 0f       	add	r30, r25
     86c:	f1 1d       	adc	r31, r1
     86e:	10 82       	st	Z, r1

		ret = DS18X20_OK;
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	05 c0       	rjmp	.+10     	; 0x87e <__stack+0x1f>
	} else {
		ret = DS18X20_ERROR;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	03 c0       	rjmp	.+6      	; 0x87e <__stack+0x1f>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__stack+0x1f>
     87c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
     87e:	6a 96       	adiw	r28, 0x1a	; 26
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	08 95       	ret

0000089a <DS18X20_write_scratchpad>:

#if DS18X20_EEPROMSUPPORT

uint8_t DS18X20_write_scratchpad( uint8_t id[], 
	uint8_t th, uint8_t tl, uint8_t conf)
{
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ec 01       	movw	r28, r24
     8a6:	06 2f       	mov	r16, r22
     8a8:	14 2f       	mov	r17, r20
     8aa:	f2 2e       	mov	r15, r18
	uint8_t ret;

	ow_reset();
     8ac:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     8b0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ow_input_pin_state>
     8b4:	88 23       	and	r24, r24
     8b6:	a1 f0       	breq	.+40     	; 0x8e0 <DS18X20_write_scratchpad+0x46>
		ow_command( DS18X20_WRITE_SCRATCHPAD, id );
     8b8:	be 01       	movw	r22, r28
     8ba:	8e e4       	ldi	r24, 0x4E	; 78
     8bc:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
		ow_byte_wr( th );
     8c0:	80 2f       	mov	r24, r16
     8c2:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
		ow_byte_wr( tl );
     8c6:	81 2f       	mov	r24, r17
     8c8:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
		if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE ) {
     8cc:	88 81       	ld	r24, Y
     8ce:	88 32       	cpi	r24, 0x28	; 40
     8d0:	11 f0       	breq	.+4      	; 0x8d6 <DS18X20_write_scratchpad+0x3c>
     8d2:	82 32       	cpi	r24, 0x22	; 34
     8d4:	39 f4       	brne	.+14     	; 0x8e4 <DS18X20_write_scratchpad+0x4a>
			ow_byte_wr( conf ); // config only available on DS18B20 and DS1822
     8d6:	8f 2d       	mov	r24, r15
     8d8:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
		}
		ret = DS18X20_OK;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <DS18X20_write_scratchpad+0x4c>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_write_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <DS18X20_write_scratchpad+0x4c>
		ow_byte_wr( th );
		ow_byte_wr( tl );
		if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE ) {
			ow_byte_wr( conf ); // config only available on DS18B20 and DS1822
		}
		ret = DS18X20_OK;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
//		uart_puts_P_verbose( "DS18X20_write_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
	}

	return ret;
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	08 95       	ret

000008f2 <DS18X20_read_scratchpad>:

uint8_t DS18X20_read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
     8fe:	8b 01       	movw	r16, r22
     900:	f4 2e       	mov	r15, r20
	uint8_t ret;

	ow_reset();
     902:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     906:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ow_input_pin_state>
     90a:	88 23       	and	r24, r24
     90c:	31 f0       	breq	.+12     	; 0x91a <DS18X20_read_scratchpad+0x28>
		ret = read_scratchpad( id, sp, n );
     90e:	4f 2d       	mov	r20, r15
     910:	b8 01       	movw	r22, r16
     912:	ce 01       	movw	r24, r28
     914:	0e 94 ad 01 	call	0x35a	; 0x35a <read_scratchpad>
     918:	01 c0       	rjmp	.+2      	; 0x91c <DS18X20_read_scratchpad+0x2a>
	} 
	else {
//		uart_puts_P_verbose( "DS18X20_read_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     91a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	08 95       	ret

00000928 <DS18X20_scratchpad_to_eeprom>:

uint8_t DS18X20_scratchpad_to_eeprom( uint8_t with_power_extern, 
	uint8_t id[] )
{
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	18 2f       	mov	r17, r24
     930:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
     932:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     936:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ow_input_pin_state>
     93a:	88 23       	and	r24, r24
     93c:	e1 f0       	breq	.+56     	; 0x976 <DS18X20_scratchpad_to_eeprom+0x4e>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
     93e:	11 30       	cpi	r17, 0x01	; 1
     940:	71 f0       	breq	.+28     	; 0x95e <DS18X20_scratchpad_to_eeprom+0x36>
			ow_command_with_parasite_enable( DS18X20_COPY_SCRATCHPAD, id );
     942:	be 01       	movw	r22, r28
     944:	88 e4       	ldi	r24, 0x48	; 72
     946:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <ow_command_with_parasite_enable>
     94a:	83 ec       	ldi	r24, 0xC3	; 195
     94c:	99 e0       	ldi	r25, 0x09	; 9
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <DS18X20_scratchpad_to_eeprom+0x26>
     952:	00 c0       	rjmp	.+0      	; 0x954 <DS18X20_scratchpad_to_eeprom+0x2c>
     954:	00 00       	nop
		} else {
			ow_command( DS18X20_COPY_SCRATCHPAD, id );
		}
		_delay_ms(DS18X20_COPYSP_DELAY); // wait for 10 ms 
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_parasite_disable();
     956:	0e 94 22 06 	call	0xc44	; 0xc44 <ow_parasite_disable>
		}
		ret = DS18X20_OK;
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0d c0       	rjmp	.+26     	; 0x978 <DS18X20_scratchpad_to_eeprom+0x50>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_COPY_SCRATCHPAD, id );
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_COPY_SCRATCHPAD, id );
     95e:	be 01       	movw	r22, r28
     960:	88 e4       	ldi	r24, 0x48	; 72
     962:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
     966:	83 ec       	ldi	r24, 0xC3	; 195
     968:	99 e0       	ldi	r25, 0x09	; 9
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <DS18X20_scratchpad_to_eeprom+0x42>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <DS18X20_scratchpad_to_eeprom+0x48>
     970:	00 00       	nop
		}
		_delay_ms(DS18X20_COPYSP_DELAY); // wait for 10 ms 
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_parasite_disable();
		}
		ret = DS18X20_OK;
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	01 c0       	rjmp	.+2      	; 0x978 <DS18X20_scratchpad_to_eeprom+0x50>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_copy_scratchpad: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
     976:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ret;
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	08 95       	ret

00000980 <DS18X20_eeprom_to_scratchpad>:

uint8_t DS18X20_eeprom_to_scratchpad( uint8_t id[] )
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
	uint8_t ret;
	uint8_t retry_count=255;

	ow_reset();
     986:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     98a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ow_input_pin_state>
     98e:	88 23       	and	r24, r24
     990:	91 f0       	breq	.+36     	; 0x9b6 <DS18X20_eeprom_to_scratchpad+0x36>
		ow_command( DS18X20_RECALL_E2, id );
     992:	be 01       	movw	r22, r28
     994:	88 eb       	ldi	r24, 0xB8	; 184
     996:	0e 94 f7 06 	call	0xdee	; 0xdee <ow_command>
		while( retry_count-- && !( ow_bit_io( 1 ) ) ) { 
     99a:	ce ef       	ldi	r28, 0xFE	; 254
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DS18X20_eeprom_to_scratchpad+0x22>
     99e:	c1 50       	subi	r28, 0x01	; 1
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <DS18X20_eeprom_to_scratchpad+0x2c>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
     9a8:	88 23       	and	r24, r24
     9aa:	c9 f3       	breq	.-14     	; 0x99e <DS18X20_eeprom_to_scratchpad+0x1e>
			;
		}
		if ( retry_count ) {
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	cc 23       	and	r28, r28
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <DS18X20_eeprom_to_scratchpad+0x38>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <DS18X20_eeprom_to_scratchpad+0x38>
			ret = DS18X20_ERROR;
		}
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_recall_E2: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     9be:	da 9a       	sbi	0x1b, 2	; 27
    lcd_e_delay();
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <toggle_e+0x4>
    lcd_e_low();
     9c2:	da 98       	cbi	0x1b, 2	; 27
     9c4:	08 95       	ret

000009c6 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     9c6:	cf 93       	push	r28
     9c8:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     9ca:	66 23       	and	r22, r22
     9cc:	11 f0       	breq	.+4      	; 0x9d2 <lcd_write+0xc>
       lcd_rs_high();
     9ce:	d8 9a       	sbi	0x1b, 0	; 27
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     9d2:	d8 98       	cbi	0x1b, 0	; 27
    }
    lcd_rw_low();
     9d4:	d9 98       	cbi	0x1b, 1	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     9d6:	d3 9a       	sbi	0x1a, 3	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     9d8:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     9da:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     9dc:	d6 9a       	sbi	0x1a, 6	; 26
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     9de:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     9e0:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     9e2:	dc 98       	cbi	0x1b, 4	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     9e4:	db 98       	cbi	0x1b, 3	; 27
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     9e6:	cc 23       	and	r28, r28
     9e8:	0c f4       	brge	.+2      	; 0x9ec <lcd_write+0x26>
     9ea:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     9ec:	c6 fd       	sbrc	r28, 6
     9ee:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     9f0:	c5 fd       	sbrc	r28, 5
     9f2:	dc 9a       	sbi	0x1b, 4	; 27
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     9f4:	c4 fd       	sbrc	r28, 4
     9f6:	db 9a       	sbi	0x1b, 3	; 27
        lcd_e_toggle();
     9f8:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     9fc:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     9fe:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     a00:	dc 98       	cbi	0x1b, 4	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     a02:	db 98       	cbi	0x1b, 3	; 27
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     a04:	c3 fd       	sbrc	r28, 3
     a06:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     a08:	c2 fd       	sbrc	r28, 2
     a0a:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     a0c:	c1 fd       	sbrc	r28, 1
     a0e:	dc 9a       	sbi	0x1b, 4	; 27
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     a10:	c0 fd       	sbrc	r28, 0
     a12:	db 9a       	sbi	0x1b, 3	; 27
        lcd_e_toggle();        
     a14:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     a18:	db 9a       	sbi	0x1b, 3	; 27
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     a1a:	dc 9a       	sbi	0x1b, 4	; 27
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     a1c:	dd 9a       	sbi	0x1b, 5	; 27
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     a1e:	de 9a       	sbi	0x1b, 6	; 27
    }
}
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     a28:	d8 9a       	sbi	0x1b, 0	; 27
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     a2c:	d8 98       	cbi	0x1b, 0	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
     a2e:	d9 9a       	sbi	0x1b, 1	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     a30:	d3 98       	cbi	0x1a, 3	; 26
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     a32:	d4 98       	cbi	0x1a, 4	; 26
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     a34:	d5 98       	cbi	0x1a, 5	; 26
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     a36:	d6 98       	cbi	0x1a, 6	; 26
                
        /* read high nibble first */
        lcd_e_high();
     a38:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();        
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     a3c:	cb 99       	sbic	0x19, 3	; 25
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     a44:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     a46:	cc 99       	sbic	0x19, 4	; 25
     a48:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     a4a:	cd 99       	sbic	0x19, 5	; 25
     a4c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     a4e:	ce 99       	sbic	0x19, 6	; 25
     a50:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     a52:	da 98       	cbi	0x1b, 2	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     a56:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     a5a:	cb 99       	sbic	0x19, 3	; 25
     a5c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     a5e:	cc 99       	sbic	0x19, 4	; 25
     a60:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     a62:	cd 99       	sbic	0x19, 5	; 25
     a64:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     a66:	ce 99       	sbic	0x19, 6	; 25
     a68:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     a6a:	da 98       	cbi	0x1b, 2	; 27
    }
    return data;
}
     a6c:	08 95       	ret

00000a6e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_read>
     a74:	88 23       	and	r24, r24
     a76:	dc f3       	brlt	.-10     	; 0xa6e <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_read>
    
}/* lcd_waitbusy */
     a80:	08 95       	ret

00000a82 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     a82:	cf 93       	push	r28
     a84:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     a86:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_waitbusy>
    lcd_write(cmd,0);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	8c 2f       	mov	r24, r28
     a8e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_write>
}
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     a96:	cf 93       	push	r28
     a98:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     a9a:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_waitbusy>
    lcd_write(data,1);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8c 2f       	mov	r24, r28
     aa2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_write>
}
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     aaa:	61 11       	cpse	r22, r1
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     aae:	80 58       	subi	r24, 0x80	; 128
     ab0:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
     ab4:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     ab6:	80 54       	subi	r24, 0x40	; 64
     ab8:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
     abc:	08 95       	ret

00000abe <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     abe:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_waitbusy>
}
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	08 95       	ret

00000ac6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
     acc:	08 95       	ret

00000ace <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
     ad4:	08 95       	ret

00000ad6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     ad6:	cf 93       	push	r28
     ad8:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     ada:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_waitbusy>
    if (c=='\n')
     ade:	ca 30       	cpi	r28, 0x0A	; 10
     ae0:	49 f4       	brne	.+18     	; 0xaf4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     ae2:	80 34       	cpi	r24, 0x40	; 64
     ae4:	10 f4       	brcc	.+4      	; 0xaea <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
     aea:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     aec:	80 58       	subi	r24, 0x80	; 128
     aee:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
     af2:	04 c0       	rjmp	.+8      	; 0xafc <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	8c 2f       	mov	r24, r28
     af8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <lcd_write>
    }

}/* lcd_putc */
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     b04:	ec 01       	movw	r28, r24
     b06:	89 91       	ld	r24, Y+
     b08:	88 23       	and	r24, r24
     b0a:	29 f0       	breq	.+10     	; 0xb16 <lcd_puts+0x16>
    	lcd_putc(c);
     b0c:	0e 94 6b 05 	call	0xad6	; 0xad6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     b10:	89 91       	ld	r24, Y+
     b12:	81 11       	cpse	r24, r1
     b14:	fb cf       	rjmp	.-10     	; 0xb0c <lcd_puts+0xc>
    	lcd_putc(c);
    }

}/* lcd_puts */
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <lcd_put_num>:

/**
 * display number
 */
void lcd_put_num(const uint16_t n)
{
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	2a 97       	sbiw	r28, 0x0a	; 10
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	itoa(n,buf,10);
     b30:	4a e0       	ldi	r20, 0x0A	; 10
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	be 01       	movw	r22, r28
     b36:	6f 5f       	subi	r22, 0xFF	; 255
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <itoa>
	lcd_puts(buf);
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
}
     b46:	2a 96       	adiw	r28, 0x0a	; 10
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     b5c:	ec 01       	movw	r28, r24
     b5e:	21 96       	adiw	r28, 0x01	; 1
     b60:	fc 01       	movw	r30, r24
     b62:	84 91       	lpm	r24, Z
     b64:	88 23       	and	r24, r24
     b66:	39 f0       	breq	.+14     	; 0xb76 <lcd_puts_p+0x1e>
        lcd_putc(c);
     b68:	0e 94 6b 05 	call	0xad6	; 0xad6 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     b6c:	fe 01       	movw	r30, r28
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	84 91       	lpm	r24, Z
     b72:	81 11       	cpse	r24, r1
     b74:	f9 cf       	rjmp	.-14     	; 0xb68 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     b84:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     b86:	d1 9a       	sbi	0x1a, 1	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     b88:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     b8a:	d3 9a       	sbi	0x1a, 3	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     b8c:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     b8e:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     b90:	d6 9a       	sbi	0x1a, 6	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     b92:	e0 ea       	ldi	r30, 0xA0	; 160
     b94:	ff e0       	ldi	r31, 0x0F	; 15
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     b9a:	dc 9a       	sbi	0x1b, 4	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     b9c:	db 9a       	sbi	0x1b, 3	; 27
    lcd_e_toggle();
     b9e:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ba2:	e0 ee       	ldi	r30, 0xE0	; 224
     ba4:	f4 e0       	ldi	r31, 0x04	; 4
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     baa:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     bae:	c0 e1       	ldi	r28, 0x10	; 16
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	fe 01       	movw	r30, r28
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     bb8:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     bbc:	fe 01       	movw	r30, r28
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     bc2:	db 98       	cbi	0x1b, 3	; 27
    lcd_e_toggle();
     bc4:	0e 94 df 04 	call	0x9be	; 0x9be <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     bc8:	21 97       	sbiw	r28, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     bcc:	88 e2       	ldi	r24, 0x28	; 40
     bce:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     bd8:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     be2:	81 2f       	mov	r24, r17
     be4:	0e 94 41 05 	call	0xa82	; 0xa82 <lcd_command>

}/* lcd_init */
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	08 95       	ret

00000bf0 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
     bf0:	86 b3       	in	r24, 0x16	; 22
}
     bf2:	84 70       	andi	r24, 0x04	; 4
     bf4:	08 95       	ret

00000bf6 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     bf6:	c2 9a       	sbi	0x18, 2	; 24
	OW_DIR_OUT();
     bf8:	ba 9a       	sbi	0x17, 2	; 23
     bfa:	08 95       	ret

00000bfc <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c02:	df b7       	in	r29, 0x3f	; 63
     c04:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
     c06:	c2 98       	cbi	0x18, 2	; 24
#endif
		OW_DIR_OUT();    // drive bus low
     c08:	ba 9a       	sbi	0x17, 2	; 23
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <ow_bit_io_intern+0x10>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
     c0c:	88 23       	and	r24, r24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <ow_bit_io_intern+0x18>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
     c10:	ba 98       	cbi	0x17, 2	; 23
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
     c12:	c2 9a       	sbi	0x18, 2	; 24
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	8a 95       	dec	r24
     c18:	f1 f7       	brne	.-4      	; 0xc16 <ow_bit_io_intern+0x1a>
     c1a:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
     c1c:	b2 9b       	sbis	0x16, 2	; 22
			b = 0;  // sample at end of read-timeslot
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	8e e0       	ldi	r24, 0x0E	; 14
     c22:	8a 95       	dec	r24
     c24:	f1 f7       	brne	.-4      	; 0xc22 <ow_bit_io_intern+0x26>
     c26:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     c28:	c2 9a       	sbi	0x18, 2	; 24
#endif
		OW_DIR_IN();
     c2a:	ba 98       	cbi	0x17, 2	; 23
	
		if ( with_parasite_enable ) {
     c2c:	61 11       	cpse	r22, r1
			ow_parasite_enable();
     c2e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <ow_parasite_enable>
     c32:	df bf       	out	0x3f, r29	; 63
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	8a 95       	dec	r24
     c38:	f1 f7       	brne	.-4      	; 0xc36 <ow_bit_io_intern+0x3a>
     c3a:	00 00       	nop
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
     c3c:	8c 2f       	mov	r24, r28
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
     c44:	ba 98       	cbi	0x17, 2	; 23
     c46:	08 95       	ret

00000c48 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     c48:	c2 98       	cbi	0x18, 2	; 24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     c4a:	ba 9a       	sbi	0x17, 2	; 23
     c4c:	80 ea       	ldi	r24, 0xA0	; 160
     c4e:	8a 95       	dec	r24
     c50:	f1 f7       	brne	.-4      	; 0xc4e <ow_reset+0x6>
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c52:	9f b7       	in	r25, 0x3f	; 63
     c54:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     c56:	ba 98       	cbi	0x17, 2	; 23
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     c58:	c2 9a       	sbi	0x18, 2	; 24
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	8a 95       	dec	r24
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <ow_reset+0x14>
     c60:	00 00       	nop
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     c62:	86 b3       	in	r24, 0x16	; 22
     c64:	9f bf       	out	0x3f, r25	; 63
     c66:	9a e8       	ldi	r25, 0x8A	; 138
     c68:	9a 95       	dec	r25
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <ow_reset+0x20>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <ow_reset+0x26>
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     c6e:	b2 9b       	sbis	0x16, 2	; 22
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <ow_reset+0x2e>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     c72:	84 70       	andi	r24, 0x04	; 4
     c74:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     c76:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
     c78:	08 95       	ret

00000c7a <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	81 70       	andi	r24, 0x01	; 1
     c7e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ow_bit_io_intern>
}
     c82:	08 95       	ret

00000c84 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	c8 2f       	mov	r28, r24
     c8a:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     c8c:	8c 2f       	mov	r24, r28
     c8e:	81 70       	andi	r24, 0x01	; 1
     c90:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
		b >>= 1;
     c94:	c6 95       	lsr	r28
		if( j ) {
     c96:	81 11       	cpse	r24, r1
			b |= 0x80;
     c98:	c0 68       	ori	r28, 0x80	; 128
     c9a:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     c9c:	b9 f7       	brne	.-18     	; 0xc8c <ow_byte_wr+0x8>
	
	return b;
}
     c9e:	8c 2f       	mov	r24, r28
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     cac:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     cae:	d1 30       	cpi	r29, 0x01	; 1
     cb0:	31 f0       	breq	.+12     	; 0xcbe <ow_byte_wr_with_parasite_enable+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	8c 2f       	mov	r24, r28
     cb6:	81 70       	andi	r24, 0x01	; 1
     cb8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ow_bit_io_intern>
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <ow_byte_wr_with_parasite_enable+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	8c 2f       	mov	r24, r28
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ow_bit_io_intern>
		}
		b >>= 1;
     cc8:	c6 95       	lsr	r28
		if( j ) {
     cca:	81 11       	cpse	r24, r1
			b |= 0x80;
     ccc:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     cce:	d1 50       	subi	r29, 0x01	; 1
     cd0:	71 f7       	brne	.-36     	; 0xcae <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     cd2:	8c 2f       	mov	r24, r28
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	e8 2e       	mov	r14, r24
     ce8:	eb 01       	movw	r28, r22
     cea:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     cec:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>

	if( id ) {
     cf0:	20 97       	sbiw	r28, 0x00	; 0
     cf2:	69 f0       	breq	.+26     	; 0xd0e <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     cf4:	85 e5       	ldi	r24, 0x55	; 85
     cf6:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
	
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
     cfa:	8e 01       	movw	r16, r28
     cfc:	08 5f       	subi	r16, 0xF8	; 248
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255

	if( id ) {
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     d00:	89 91       	ld	r24, Y+
     d02:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
			id++;
		} while( --i );
     d06:	c0 17       	cp	r28, r16
     d08:	d1 07       	cpc	r29, r17
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <ow_command_intern+0x26>
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     d0e:	8c ec       	ldi	r24, 0xCC	; 204
     d10:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     d14:	ff 20       	and	r15, r15
     d16:	21 f0       	breq	.+8      	; 0xd20 <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     d18:	8e 2d       	mov	r24, r14
     d1a:	0e 94 53 06 	call	0xca6	; 0xca6 <ow_byte_wr_with_parasite_enable>
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     d20:	8e 2d       	mov	r24, r14
     d22:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
	}
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
}
     d3a:	08 95       	ret

00000d3c <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	d8 2e       	mov	r13, r24
     d4c:	eb 01       	movw	r28, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     d4e:	0e 94 24 06 	call	0xc48	; 0xc48 <ow_reset>
     d52:	81 11       	cpse	r24, r1
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <ow_rom_search+0x68>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     d56:	80 ef       	ldi	r24, 0xF0	; 240
     d58:	0e 94 42 06 	call	0xc84	; 0xc84 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     d5c:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     d5e:	10 e4       	ldi	r17, 0x40	; 64
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
}


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
     d60:	0f 2e       	mov	r0, r31
     d62:	f8 ef       	ldi	r31, 0xF8	; 248
     d64:	ff 2e       	mov	r15, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	f1 0e       	add	r15, r17
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
     d70:	08 2f       	mov	r16, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
     d78:	88 23       	and	r24, r24
     d7a:	19 f0       	breq	.+6      	; 0xd82 <ow_rom_search+0x46>
				if( b ) {               // 0b11
     d7c:	00 23       	and	r16, r16
     d7e:	d1 f0       	breq	.+52     	; 0xdb4 <ow_rom_search+0x78>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <ow_rom_search+0x6e>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     d82:	01 11       	cpse	r16, r1
     d84:	23 c0       	rjmp	.+70     	; 0xdcc <ow_rom_search+0x90>
					if( diff > i || ((*id & 1) && diff != i) ) {
     d86:	1d 15       	cp	r17, r13
     d88:	e0 f0       	brcs	.+56     	; 0xdc2 <ow_rom_search+0x86>
     d8a:	88 81       	ld	r24, Y
     d8c:	80 ff       	sbrs	r24, 0
     d8e:	12 c0       	rjmp	.+36     	; 0xdb4 <ow_rom_search+0x78>
     d90:	d1 12       	cpse	r13, r17
     d92:	1a c0       	rjmp	.+52     	; 0xdc8 <ow_rom_search+0x8c>
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <ow_rom_search+0x78>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     d96:	11 50       	subi	r17, 0x01	; 1
			
		} while( --j );
     d98:	1f 11       	cpse	r17, r15
     d9a:	e7 cf       	rjmp	.-50     	; 0xd6a <ow_rom_search+0x2e>
		
		id++;                           // next byte
     d9c:	21 96       	adiw	r28, 0x01	; 1
	
	} while( i );
     d9e:	11 11       	cpse	r17, r1
     da0:	df cf       	rjmp	.-66     	; 0xd60 <ow_rom_search+0x24>
     da2:	1c c0       	rjmp	.+56     	; 0xddc <ow_rom_search+0xa0>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     da4:	ee 24       	eor	r14, r14
     da6:	ea 94       	dec	r14
     da8:	19 c0       	rjmp	.+50     	; 0xddc <ow_rom_search+0xa0>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     daa:	0f 2e       	mov	r0, r31
     dac:	fe ef       	ldi	r31, 0xFE	; 254
     dae:	ef 2e       	mov	r14, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	14 c0       	rjmp	.+40     	; 0xddc <ow_rom_search+0xa0>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     db4:	80 2f       	mov	r24, r16
     db6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
			*id >>= 1;
     dba:	98 81       	ld	r25, Y
     dbc:	96 95       	lsr	r25
     dbe:	98 83       	st	Y, r25
     dc0:	ea cf       	rjmp	.-44     	; 0xd96 <ow_rom_search+0x5a>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     dc2:	e1 2e       	mov	r14, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     dc4:	01 e0       	ldi	r16, 0x01	; 1
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <ow_rom_search+0x90>
						next_diff = i;  // next pass 0
     dc8:	e1 2e       	mov	r14, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     dca:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     dcc:	80 2f       	mov	r24, r16
     dce:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ow_bit_io>
			*id >>= 1;
     dd2:	98 81       	ld	r25, Y
     dd4:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     dd6:	90 68       	ori	r25, 0x80	; 128
     dd8:	98 83       	st	Y, r25
     dda:	dd cf       	rjmp	.-70     	; 0xd96 <ow_rom_search+0x5a>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     ddc:	8e 2d       	mov	r24, r14
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	08 95       	ret

00000dee <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	0e 94 6d 06 	call	0xcda	; 0xcda <ow_command_intern>
     df4:	08 95       	ret

00000df6 <ow_command_with_parasite_enable>:
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 6d 06 	call	0xcda	; 0xcda <ow_command_intern>
     dfc:	08 95       	ret

00000dfe <readButtons>:
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	80 b3       	in	r24, 0x10	; 16
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	87 e8       	ldi	r24, 0x87	; 135
     e0e:	93 e1       	ldi	r25, 0x13	; 19
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <readButtons+0x12>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <readButtons+0x18>
     e16:	00 00       	nop
     e18:	80 91 60 00 	lds	r24, 0x0060
     e1c:	88 23       	and	r24, r24
     e1e:	b1 f0       	breq	.+44     	; 0xe4c <readButtons+0x4e>
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	82 fd       	sbrc	r24, 2
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <readButtons+0x34>
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	84 fd       	sbrc	r24, 4
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <readButtons+0x38>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	81 70       	andi	r24, 0x01	; 1
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <readButtons+0x3a>
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <readButtons+0x3a>
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	99 81       	ldd	r25, Y+1	; 0x01
     e3a:	91 11       	cpse	r25, r1
     e3c:	10 92 60 00 	sts	0x0060, r1
     e40:	81 11       	cpse	r24, r1
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <readButtons+0x50>
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	90 93 60 00 	sts	0x0060, r25
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <readButtons+0x50>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0f 90       	pop	r0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <waitForOk>:
	return ret;
}

void waitForOk()
{
	while(readButtons() != BTN_OK);
     e56:	0e 94 ff 06 	call	0xdfe	; 0xdfe <readButtons>
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <waitForOk>
}
     e5e:	08 95       	ret

00000e60 <setMashLinearStartTemp>:

}


void setMashLinearStartTemp(MashProfile * profile)
{
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
	profile->linearStopTemp = getUserValueWithString("Lin. start. tmp",50,20,1);
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	44 e1       	ldi	r20, 0x14	; 20
     e6a:	62 e3       	ldi	r22, 0x32	; 50
     e6c:	85 e7       	ldi	r24, 0x75	; 117
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 a4 09 	call	0x1348	; 0x1348 <getUserValueWithString>
     e74:	88 8f       	std	Y+24, r24	; 0x18
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <setMashLinearStopTemp>:

void setMashLinearStopTemp(MashProfile * profile)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
	profile->linearStopTemp = getUserValueWithString("Lin. stop. tmp",80,60,1);
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	4c e3       	ldi	r20, 0x3C	; 60
     e86:	60 e5       	ldi	r22, 0x50	; 80
     e88:	85 e8       	ldi	r24, 0x85	; 133
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 a4 09 	call	0x1348	; 0x1348 <getUserValueWithString>
     e90:	88 8f       	std	Y+24, r24	; 0x18
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <setNumberOfMashBreaks>:


void setNumberOfMashBreaks(MashProfile * profile)
{
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
	BOOL done = FALSE;
	uint8_t breaks = 2;
     ea8:	12 e0       	ldi	r17, 0x02	; 2
	{
		printStringAndNum("Nr Breaks", breaks);
		mod = getValueFromInput();
		breaks += mod;

		if(mod == 0)
     eaa:	01 e0       	ldi	r16, 0x01	; 1
     eac:	e1 2c       	mov	r14, r1
			done = TRUE;

		if(breaks < 2)
			breaks = MAX_NR_OF_BREAKS;
     eae:	0f 2e       	mov	r0, r31
     eb0:	fa e0       	ldi	r31, 0x0A	; 10
     eb2:	df 2e       	mov	r13, r31
     eb4:	f0 2d       	mov	r31, r0
		if(breaks > MAX_NR_OF_BREAKS)
			breaks = 2;
     eb6:	68 94       	set
     eb8:	ff 24       	eor	r15, r15
     eba:	f1 f8       	bld	r15, 1
	BOOL done = FALSE;
	uint8_t breaks = 2;
	int8_t mod = 0;
	while( !done )
	{
		printStringAndNum("Nr Breaks", breaks);
     ebc:	61 2f       	mov	r22, r17
     ebe:	84 e9       	ldi	r24, 0x94	; 148
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 8c 09 	call	0x1318	; 0x1318 <printStringAndNum>
		mod = getValueFromInput();
     ec6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <getValueFromInput>
		breaks += mod;
     eca:	18 0f       	add	r17, r24

		if(mod == 0)
     ecc:	90 2f       	mov	r25, r16
     ece:	81 11       	cpse	r24, r1
     ed0:	9e 2d       	mov	r25, r14
			done = TRUE;

		if(breaks < 2)
     ed2:	12 30       	cpi	r17, 0x02	; 2
     ed4:	18 f0       	brcs	.+6      	; 0xedc <setNumberOfMashBreaks+0x44>
			breaks = MAX_NR_OF_BREAKS;
		if(breaks > MAX_NR_OF_BREAKS)
     ed6:	1b 30       	cpi	r17, 0x0B	; 11
     ed8:	18 f4       	brcc	.+6      	; 0xee0 <setNumberOfMashBreaks+0x48>
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <setNumberOfMashBreaks+0x4a>

		if(mod == 0)
			done = TRUE;

		if(breaks < 2)
			breaks = MAX_NR_OF_BREAKS;
     edc:	1d 2d       	mov	r17, r13
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <setNumberOfMashBreaks+0x4a>
		if(breaks > MAX_NR_OF_BREAKS)
			breaks = 2;
     ee0:	1f 2d       	mov	r17, r15
void setNumberOfMashBreaks(MashProfile * profile)
{
	BOOL done = FALSE;
	uint8_t breaks = 2;
	int8_t mod = 0;
	while( !done )
     ee2:	99 23       	and	r25, r25
     ee4:	59 f3       	breq	.-42     	; 0xebc <setNumberOfMashBreaks+0x24>
		if(breaks < 2)
			breaks = MAX_NR_OF_BREAKS;
		if(breaks > MAX_NR_OF_BREAKS)
			breaks = 2;
	}
	profile->nrOfBreaks = breaks;
     ee6:	19 83       	std	Y+1, r17	; 0x01
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	08 95       	ret

00000ef8 <setMashTimeLoop>:

void setMashTimeLoop(MashProfile * profile, uint8_t index)
{
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
     f08:	d6 2e       	mov	r13, r22
	uint8_t done = 0;
	uint8_t mashTime = 10;
     f0a:	1a e0       	ldi	r17, 0x0A	; 10
		printStringAndNum("Break Time", mashTime);
		int8_t val = getValueFromInput();

		mashTime += val * 5;

		if(val == 0)
     f0c:	01 e0       	ldi	r16, 0x01	; 1
     f0e:	e1 2c       	mov	r14, r1
			done = TRUE;

		if(mashTime < 5)
			mashTime = 40;
		if(mashTime > 40)
			mashTime = 5;
     f10:	0f 2e       	mov	r0, r31
     f12:	f5 e0       	ldi	r31, 0x05	; 5
     f14:	ff 2e       	mov	r15, r31
     f16:	f0 2d       	mov	r31, r0
	uint8_t done = 0;
	uint8_t mashTime = 10;

	while( !done )
	{
		printStringAndNum("Break Time", mashTime);
     f18:	61 2f       	mov	r22, r17
     f1a:	8e e9       	ldi	r24, 0x9E	; 158
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 8c 09 	call	0x1318	; 0x1318 <printStringAndNum>
		int8_t val = getValueFromInput();
     f22:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <getValueFromInput>

		mashTime += val * 5;
     f26:	98 2f       	mov	r25, r24
     f28:	99 0f       	add	r25, r25
     f2a:	99 0f       	add	r25, r25
     f2c:	98 0f       	add	r25, r24
     f2e:	19 0f       	add	r17, r25

		if(val == 0)
     f30:	90 2f       	mov	r25, r16
     f32:	81 11       	cpse	r24, r1
     f34:	9e 2d       	mov	r25, r14
			done = TRUE;

		if(mashTime < 5)
     f36:	15 30       	cpi	r17, 0x05	; 5
     f38:	18 f0       	brcs	.+6      	; 0xf40 <setMashTimeLoop+0x48>
			mashTime = 40;
		if(mashTime > 40)
     f3a:	19 32       	cpi	r17, 0x29	; 41
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <setMashTimeLoop+0x4c>
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <setMashTimeLoop+0x4e>

		if(val == 0)
			done = TRUE;

		if(mashTime < 5)
			mashTime = 40;
     f40:	18 e2       	ldi	r17, 0x28	; 40
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <setMashTimeLoop+0x4e>
		if(mashTime > 40)
			mashTime = 5;
     f44:	1f 2d       	mov	r17, r15
void setMashTimeLoop(MashProfile * profile, uint8_t index)
{
	uint8_t done = 0;
	uint8_t mashTime = 10;

	while( !done )
     f46:	99 23       	and	r25, r25
     f48:	39 f3       	breq	.-50     	; 0xf18 <setMashTimeLoop+0x20>
		if(mashTime < 5)
			mashTime = 40;
		if(mashTime > 40)
			mashTime = 5;
	}
	profile->breakTimes[index] = mashTime;
     f4a:	cd 0d       	add	r28, r13
     f4c:	d1 1d       	adc	r29, r1
     f4e:	1a 83       	std	Y+2, r17	; 0x02
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	08 95       	ret

00000f60 <setMashTimesLoop>:

}


void setMashTimesLoop(MashProfile * profile)
{
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
	for(uint8_t breaks = 0; breaks < profile->nrOfBreaks; breaks++)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	88 23       	and	r24, r24
     f6c:	49 f0       	breq	.+18     	; 0xf80 <setMashTimesLoop+0x20>
     f6e:	10 e0       	ldi	r17, 0x00	; 0
	{
		setMashTimeLoop(profile,breaks);
     f70:	61 2f       	mov	r22, r17
     f72:	ce 01       	movw	r24, r28
     f74:	0e 94 7c 07 	call	0xef8	; 0xef8 <setMashTimeLoop>
}


void setMashTimesLoop(MashProfile * profile)
{
	for(uint8_t breaks = 0; breaks < profile->nrOfBreaks; breaks++)
     f78:	1f 5f       	subi	r17, 0xFF	; 255
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	18 17       	cp	r17, r24
     f7e:	c0 f3       	brcs	.-16     	; 0xf70 <setMashTimesLoop+0x10>
	{
		setMashTimeLoop(profile,breaks);
	}
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	08 95       	ret

00000f88 <setMashTempLoop>:
	}
	profile->breakTimes[index] = mashTime;
}

void setMashTempLoop(MashProfile * profile, uint8_t index)
{
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	d6 2e       	mov	r13, r22
	uint8_t done = 0;
	uint8_t mashTmp = 20;
     f9a:	14 e1       	ldi	r17, 0x14	; 20
		printStringAndNum("Break Time", mashTmp);
		int8_t val = getValueFromInput();

		mashTmp += val * 2;

		if(val == 0)
     f9c:	01 e0       	ldi	r16, 0x01	; 1
     f9e:	e1 2c       	mov	r14, r1
			done = TRUE;

		if(mashTmp < 20)
			mashTmp = 80;
		if(mashTmp > 80)
			mashTmp = 20;
     fa0:	0f 2e       	mov	r0, r31
     fa2:	f4 e1       	ldi	r31, 0x14	; 20
     fa4:	ff 2e       	mov	r15, r31
     fa6:	f0 2d       	mov	r31, r0
	uint8_t done = 0;
	uint8_t mashTmp = 20;

	while( !done )
	{
		printStringAndNum("Break Time", mashTmp);
     fa8:	61 2f       	mov	r22, r17
     faa:	8e e9       	ldi	r24, 0x9E	; 158
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 8c 09 	call	0x1318	; 0x1318 <printStringAndNum>
		int8_t val = getValueFromInput();
     fb2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <getValueFromInput>

		mashTmp += val * 2;
     fb6:	98 2f       	mov	r25, r24
     fb8:	99 0f       	add	r25, r25
     fba:	19 0f       	add	r17, r25

		if(val == 0)
     fbc:	90 2f       	mov	r25, r16
     fbe:	81 11       	cpse	r24, r1
     fc0:	9e 2d       	mov	r25, r14
			done = TRUE;

		if(mashTmp < 20)
     fc2:	14 31       	cpi	r17, 0x14	; 20
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <setMashTempLoop+0x44>
			mashTmp = 80;
		if(mashTmp > 80)
     fc6:	11 35       	cpi	r17, 0x51	; 81
     fc8:	18 f4       	brcc	.+6      	; 0xfd0 <setMashTempLoop+0x48>
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <setMashTempLoop+0x4a>

		if(val == 0)
			done = TRUE;

		if(mashTmp < 20)
			mashTmp = 80;
     fcc:	10 e5       	ldi	r17, 0x50	; 80
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <setMashTempLoop+0x4a>
		if(mashTmp > 80)
			mashTmp = 20;
     fd0:	1f 2d       	mov	r17, r15
void setMashTempLoop(MashProfile * profile, uint8_t index)
{
	uint8_t done = 0;
	uint8_t mashTmp = 20;

	while( !done )
     fd2:	99 23       	and	r25, r25
     fd4:	49 f3       	breq	.-46     	; 0xfa8 <setMashTempLoop+0x20>
		if(mashTmp < 20)
			mashTmp = 80;
		if(mashTmp > 80)
			mashTmp = 20;
	}
	profile->breakTemps[index] = mashTmp;
     fd6:	cd 0d       	add	r28, r13
     fd8:	d1 1d       	adc	r29, r1
     fda:	1c 87       	std	Y+12, r17	; 0x0c
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	08 95       	ret

00000fec <setMashTempsLoop>:
		setMashTimeLoop(profile,breaks);
	}
}

void setMashTempsLoop(MashProfile * profile)
{
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
	for(uint8_t breaks = 0; breaks < profile->nrOfBreaks; breaks++)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 23       	and	r24, r24
     ff8:	49 f0       	breq	.+18     	; 0x100c <setMashTempsLoop+0x20>
     ffa:	10 e0       	ldi	r17, 0x00	; 0
	{
		setMashTempLoop(profile,breaks);
     ffc:	61 2f       	mov	r22, r17
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 c4 07 	call	0xf88	; 0xf88 <setMashTempLoop>
	}
}

void setMashTempsLoop(MashProfile * profile)
{
	for(uint8_t breaks = 0; breaks < profile->nrOfBreaks; breaks++)
    1004:	1f 5f       	subi	r17, 0xFF	; 255
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	18 17       	cp	r17, r24
    100a:	c0 f3       	brcs	.-16     	; 0xffc <setMashTempsLoop+0x10>
	{
		setMashTempLoop(profile,breaks);
	}

}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret

00001014 <printMashType>:
	}
	profile->breakTemps[index] = mashTmp;
}

void printMashType(uint8_t x, uint8_t y, MashType type)
{
    1014:	cf 93       	push	r28
    1016:	c4 2f       	mov	r28, r20
	lcd_gotoxy(0,0);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	lcd_puts("Mash Profile");
    1020:	89 ea       	ldi	r24, 0xA9	; 169
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
	lcd_gotoxy(0,1);
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	switch(type)
    1030:	c1 30       	cpi	r28, 0x01	; 1
    1032:	21 f0       	breq	.+8      	; 0x103c <printMashType+0x28>
    1034:	68 f0       	brcs	.+26     	; 0x1050 <printMashType+0x3c>
    1036:	c2 30       	cpi	r28, 0x02	; 2
    1038:	31 f0       	breq	.+12     	; 0x1046 <printMashType+0x32>
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <printMashType+0x44>
	{
	case SingleInfusion:
		lcd_puts("Single Inf.");
    103c:	86 eb       	ldi	r24, 0xB6	; 182
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		break;
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <printMashType+0x44>
	case MultiStepInfusion:
		lcd_puts("Step Inf.");
    1046:	82 ec       	ldi	r24, 0xC2	; 194
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		break;
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <printMashType+0x44>
	case LinearTemp:
		lcd_puts("Linear temp");
    1050:	8c ec       	ldi	r24, 0xCC	; 204
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		break;
	default:
		break;
	}

}
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <setMashType>:

	return TRUE;
}

void setMashType(MashProfile * profile)
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
	BOOL done = FALSE;
	MashType type = SingleInfusion;
    1066:	11 e0       	ldi	r17, 0x01	; 1
		printMashType(0,0,type);
		int8_t mod = getValueFromInput();

		type += mod;

		if(mod == 0)
    1068:	01 e0       	ldi	r16, 0x01	; 1
{
	BOOL done = FALSE;
	MashType type = SingleInfusion;
	while( !done )
	{
		printMashType(0,0,type);
    106a:	41 2f       	mov	r20, r17
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 0a 08 	call	0x1014	; 0x1014 <printMashType>
		int8_t mod = getValueFromInput();
    1074:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <getValueFromInput>

		type += mod;
    1078:	18 0f       	add	r17, r24

		if(mod == 0)
    107a:	90 2f       	mov	r25, r16
    107c:	81 11       	cpse	r24, r1
    107e:	90 e0       	ldi	r25, 0x00	; 0
			done = TRUE;

		if(type > MultiStepInfusion)
    1080:	13 30       	cpi	r17, 0x03	; 3
    1082:	08 f0       	brcs	.+2      	; 0x1086 <setMashType+0x2a>
			type = LinearTemp;
    1084:	10 e0       	ldi	r17, 0x00	; 0

void setMashType(MashProfile * profile)
{
	BOOL done = FALSE;
	MashType type = SingleInfusion;
	while( !done )
    1086:	99 23       	and	r25, r25
    1088:	81 f3       	breq	.-32     	; 0x106a <setMashType+0xe>
			type = LinearTemp;
		if(type < LinearTemp)
			type = MultiStepInfusion;
	}

	profile->type = type;
    108a:	18 83       	st	Y, r17
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <printUseMashOut>:
	}

}

void printUseMashOut(uint8_t yesorno)
{
    1096:	cf 93       	push	r28
    1098:	c8 2f       	mov	r28, r24
	lcd_gotoxy(0,0);
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	lcd_puts("Mash out?");
    10a2:	88 ed       	ldi	r24, 0xD8	; 216
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
	lcd_gotoxy(0,1);
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	switch(yesorno)
    10b2:	cc 23       	and	r28, r28
    10b4:	19 f0       	breq	.+6      	; 0x10bc <printUseMashOut+0x26>
    10b6:	c1 30       	cpi	r28, 0x01	; 1
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <printUseMashOut+0x30>
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <printUseMashOut+0x38>
	{
	case 0:
		lcd_puts("no");
    10bc:	82 ee       	ldi	r24, 0xE2	; 226
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		break;
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <printUseMashOut+0x38>
	case 1:
		lcd_puts("no");
    10c6:	82 ee       	ldi	r24, 0xE2	; 226
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		break;
	default:
		break;
	}
}
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <setUseMashOut>:

	profile->type = type;
}

void setUseMashOut(MashProfile * profile)
{
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
	BOOL done = FALSE;
	uint8_t val = 0;
    10de:	10 e0       	ldi	r17, 0x00	; 0
		printUseMashOut(val);
		mod = getValueFromInput();

		val+= mod;

		if(mod == 0)
    10e0:	ff 24       	eor	r15, r15
    10e2:	f3 94       	inc	r15
    10e4:	00 e0       	ldi	r16, 0x00	; 0
	BOOL done = FALSE;
	uint8_t val = 0;
	int8_t mod = 0;
	while( !done )
	{
		printUseMashOut(val);
    10e6:	81 2f       	mov	r24, r17
    10e8:	0e 94 4b 08 	call	0x1096	; 0x1096 <printUseMashOut>
		mod = getValueFromInput();
    10ec:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <getValueFromInput>

		val+= mod;
    10f0:	18 0f       	add	r17, r24

		if(mod == 0)
    10f2:	9f 2d       	mov	r25, r15
    10f4:	81 11       	cpse	r24, r1
    10f6:	90 2f       	mov	r25, r16
			done = TRUE;

		if(val < 0)
			val = 1;
		if(val > 1)
    10f8:	12 30       	cpi	r17, 0x02	; 2
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <setUseMashOut+0x2c>
			val = 0;
    10fc:	10 2f       	mov	r17, r16
void setUseMashOut(MashProfile * profile)
{
	BOOL done = FALSE;
	uint8_t val = 0;
	int8_t mod = 0;
	while( !done )
    10fe:	99 23       	and	r25, r25
    1100:	91 f3       	breq	.-28     	; 0x10e6 <setUseMashOut+0x14>
		if(val < 0)
			val = 1;
		if(val > 1)
			val = 0;
	}
	profile->useMashOut = val;
    1102:	19 8f       	std	Y+25, r17	; 0x19

}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	08 95       	ret

00001110 <setupMash>:
#include "buttons.h"
#include "mash.h"
#include "lcd.h"

BOOL setupMash(MashProfile * profile)
{
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
	if(profile == NULL)
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	81 f1       	breq	.+96     	; 0x117a <setupMash+0x6a>
		return FALSE;

	setMashType(profile);
    111a:	0e 94 2e 08 	call	0x105c	; 0x105c <setMashType>
	if(profile->type == LinearTemp)
    111e:	88 81       	ld	r24, Y
    1120:	81 11       	cpse	r24, r1
    1122:	0d c0       	rjmp	.+26     	; 0x113e <setupMash+0x2e>
	{
		profile->nrOfBreaks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
		setMashLinearStartTemp(profile);
    1128:	ce 01       	movw	r24, r28
    112a:	0e 94 30 07 	call	0xe60	; 0xe60 <setMashLinearStartTemp>
		setMashLinearStopTemp(profile);
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 3e 07 	call	0xe7c	; 0xe7c <setMashLinearStopTemp>
		setMashTimesLoop(profile);
    1134:	ce 01       	movw	r24, r28
    1136:	0e 94 b0 07 	call	0xf60	; 0xf60 <setMashTimesLoop>
		setUseMashOut(profile);
	}
	else
		return FALSE;

	return TRUE;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	21 c0       	rjmp	.+66     	; 0x1180 <setupMash+0x70>
		profile->nrOfBreaks = 1;
		setMashLinearStartTemp(profile);
		setMashLinearStopTemp(profile);
		setMashTimesLoop(profile);
	}
	else if(profile->type == SingleInfusion)
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	61 f4       	brne	.+24     	; 0x115a <setupMash+0x4a>
	{
		profile->nrOfBreaks = 1;
    1142:	89 83       	std	Y+1, r24	; 0x01
		setMashTempsLoop(profile);
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 f6 07 	call	0xfec	; 0xfec <setMashTempsLoop>
		setMashTimesLoop(profile);
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 b0 07 	call	0xf60	; 0xf60 <setMashTimesLoop>
		setUseMashOut(profile);
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 69 08 	call	0x10d2	; 0x10d2 <setUseMashOut>
		setUseMashOut(profile);
	}
	else
		return FALSE;

	return TRUE;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <setupMash+0x70>
		profile->nrOfBreaks = 1;
		setMashTempsLoop(profile);
		setMashTimesLoop(profile);
		setUseMashOut(profile);
	}
	else if(profile->type == MultiStepInfusion)
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	81 f4       	brne	.+32     	; 0x117e <setupMash+0x6e>
	{
		setNumberOfMashBreaks(profile);
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 4c 07 	call	0xe98	; 0xe98 <setNumberOfMashBreaks>
		setMashTempsLoop(profile);
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 f6 07 	call	0xfec	; 0xfec <setMashTempsLoop>
		setMashTimesLoop(profile);
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 b0 07 	call	0xf60	; 0xf60 <setMashTimesLoop>
		setUseMashOut(profile);
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 69 08 	call	0x10d2	; 0x10d2 <setUseMashOut>
	}
	else
		return FALSE;

	return TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <setupMash+0x70>
#include "lcd.h"

BOOL setupMash(MashProfile * profile)
{
	if(profile == NULL)
		return FALSE;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <setupMash+0x70>
		setMashTempsLoop(profile);
		setMashTimesLoop(profile);
		setUseMashOut(profile);
	}
	else
		return FALSE;
    117e:	80 e0       	ldi	r24, 0x00	; 0

	return TRUE;
}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <__vector_10>:
//interrupt every 1/10 second
//controlls PID sampling and heater
//heater will use a 2 sec period PWM cycle with
//10% duty intervalls.
ISR(TIMER0_COMP_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	8f 93       	push	r24
	//samplePid();
	//compare with wanted value
	//adjust heater pwm duty cycle

	//count seconds and store minutes
	heaterCounter++;
    1192:	80 91 10 01 	lds	r24, 0x0110
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	80 93 10 01 	sts	0x0110, r24
//	}
//	if(heaterCounter <= heaterPwmDuty)
//	{
//		heaterOn();
//	}
	if( heaterCounter > 20 )
    119c:	80 91 10 01 	lds	r24, 0x0110
    11a0:	85 31       	cpi	r24, 0x15	; 21
    11a2:	10 f0       	brcs	.+4      	; 0x11a8 <__vector_10+0x22>
	{
		heaterCounter = 0;
    11a4:	10 92 10 01 	sts	0x0110, r1
	}

}
    11a8:	8f 91       	pop	r24
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_7>:


//timer1 set up as 1 sec clock
ISR(TIMER1_COMPA_vect)
{
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	8f 93       	push	r24
	//count seconds and store minutes
	sec++;
    11c0:	80 91 16 01 	lds	r24, 0x0116
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	80 93 16 01 	sts	0x0116, r24
	if( sec > 59 )
    11ca:	80 91 16 01 	lds	r24, 0x0116
    11ce:	8c 33       	cpi	r24, 0x3C	; 60
    11d0:	38 f0       	brcs	.+14     	; 0x11e0 <__vector_7+0x2c>
	{
		min++;
    11d2:	80 91 15 01 	lds	r24, 0x0115
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	80 93 15 01 	sts	0x0115, r24
		sec = 0;
    11dc:	10 92 16 01 	sts	0x0116, r1
	}
}
    11e0:	8f 91       	pop	r24
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <__vector_4>:

//tiemr2 set up as non-inverting fast pwm
//controlls the pump in the system
//initially set to 50% duty cycle
ISR(TIMER2_COMP_vect)
{
    11ec:	1f 92       	push	r1
    11ee:	0f 92       	push	r0
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	0f 92       	push	r0
    11f4:	11 24       	eor	r1, r1
	//check if pump value is increased
	//set new pump value
	//in output compare register 0
}
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <turn_on_mash_heater>:
//	return nSensors;
//}

void turn_on_mash_heater()
{
	PORTC |= _BV(MASH_HEAT);
    1200:	ae 9a       	sbi	0x15, 6	; 21
    1202:	08 95       	ret

00001204 <turn_off_mash_heater>:
}


void turn_off_mash_heater()
{
	PORTC &= ~_BV(MASH_HEAT);
    1204:	ae 98       	cbi	0x15, 6	; 21
    1206:	08 95       	ret

00001208 <setupTimers>:
{
	//set up timer 0 to interrupt every 1/10 second
	//it will be used for PID sampling and heater controll

	//ctc mode with 1024 prescaler
	TCCR0 |= (1 <<WGM01) | (1 << CS02) | (1 << CS00);
    1208:	83 b7       	in	r24, 0x33	; 51
    120a:	8d 60       	ori	r24, 0x0D	; 13
    120c:	83 bf       	out	0x33, r24	; 51
	OCR0 = 97;
    120e:	81 e6       	ldi	r24, 0x61	; 97
    1210:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
    1212:	89 b7       	in	r24, 0x39	; 57
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	89 bf       	out	0x39, r24	; 57


	// Configure timer 1 for CTC mode
	TCCR1B |= (1 << WGM12);
    1218:	8e b5       	in	r24, 0x2e	; 46
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	8e bd       	out	0x2e, r24	; 46
	// Enable CTC interrupt
	TIMSK |= (1 << OCIE1A);
    121e:	89 b7       	in	r24, 0x39	; 57
    1220:	80 61       	ori	r24, 0x10	; 16
    1222:	89 bf       	out	0x39, r24	; 57
	// Set CTC compare value to 1Hz at 1MHz AVR clock, with a prescaler of 64
	OCR1A   = 15624;
    1224:	88 e0       	ldi	r24, 0x08	; 8
    1226:	9d e3       	ldi	r25, 0x3D	; 61
    1228:	9b bd       	out	0x2b, r25	; 43
    122a:	8a bd       	out	0x2a, r24	; 42
	// Start timer at Fcpu/64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    122c:	8e b5       	in	r24, 0x2e	; 46
    122e:	83 60       	ori	r24, 0x03	; 3
    1230:	8e bd       	out	0x2e, r24	; 46

	//set non-invertin fast PWM mode for timer 2
	//this will controll the pump
	TCCR2 |= ((1 << WGM21) | (1 << WGM20) | (1 << COM21));
    1232:	85 b5       	in	r24, 0x25	; 37
    1234:	88 66       	ori	r24, 0x68	; 104
    1236:	85 bd       	out	0x25, r24	; 37
	//set prescaler to 1024 (frequency is then 1MHz/1024)
	TCCR2 |= ((1 << CS02) | (1 << CS00));
    1238:	85 b5       	in	r24, 0x25	; 37
    123a:	85 60       	ori	r24, 0x05	; 5
    123c:	85 bd       	out	0x25, r24	; 37
	//initially 50% duty
	OCR2 = 128;
    123e:	80 e8       	ldi	r24, 0x80	; 128
    1240:	83 bd       	out	0x23, r24	; 35
	//output compare interrupt enable
	TIMSK |= (1 << OCIE2);
    1242:	89 b7       	in	r24, 0x39	; 57
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	89 bf       	out	0x39, r24	; 57

	sei();
    1248:	78 94       	sei
    124a:	08 95       	ret

0000124c <main>:

}

int main(void)
{
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	6b 97       	sbiw	r28, 0x1b	; 27
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61

	state = STATE_STARTUP;
    1262:	10 92 12 01 	sts	0x0112, r1
	sec = 0;
    1266:	10 92 16 01 	sts	0x0116, r1
	min = 0;
    126a:	10 92 15 01 	sts	0x0115, r1
	//setup PORTD as half input half output
	DDRD = 0xF;
    126e:	8f e0       	ldi	r24, 0x0F	; 15
    1270:	81 bb       	out	0x11, r24	; 17


	DDRC = 0xFF;
    1272:	1f ef       	ldi	r17, 0xFF	; 255
    1274:	14 bb       	out	0x14, r17	; 20
	//PORTC &= ~_BV(MASH_HEAT);
	PORTC = 0x00;
    1276:	15 ba       	out	0x15, r1	; 21


	lcd_init(LCD_DISP_ON);
    1278:	8c e0       	ldi	r24, 0x0C	; 12
    127a:	0e 94 be 05 	call	0xb7c	; 0xb7c <lcd_init>


	lcd_puts("connect\n cables!");
    127e:	85 ee       	ldi	r24, 0xE5	; 229
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
	waitForOk();
    1286:	0e 94 2b 07 	call	0xe56	; 0xe56 <waitForOk>
	lcd_clrscr();
    128a:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_clrscr>

	MashProfile profile;
	setupMash(&profile);
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	0e 94 88 08 	call	0x1110	; 0x1110 <setupMash>

//
	lcd_clrscr();
    1296:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_clrscr>

	//switch on ssr for mash tun
	//ad start mash timer
	lcd_clrscr();
    129a:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_clrscr>
	lcd_puts("Starting mash");
    129e:	86 ef       	ldi	r24, 0xF6	; 246
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
	state = STATE_MASH;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 12 01 	sts	0x0112, r24

#ifndef OW_ONE_BUS
	ow_set_bus(&PINB,&TMP_PORT,&DDRB,TMP_PIN);
#endif

	uint8_t diff = OW_SEARCH_FIRST;
    12ac:	1b 8f       	std	Y+27, r17	; 0x1b
	if(DS18X20_OK != DS18X20_find_sensor(&diff, gSensorIDs[0]))
    12ae:	67 e1       	ldi	r22, 0x17	; 23
    12b0:	71 e0       	ldi	r23, 0x01	; 1
    12b2:	ce 01       	movw	r24, r28
    12b4:	4b 96       	adiw	r24, 0x1b	; 27
    12b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <DS18X20_find_sensor>
    12ba:	88 23       	and	r24, r24
    12bc:	49 f0       	breq	.+18     	; 0x12d0 <main+0x84>
	{
		lcd_puts("No Sensor!");
    12be:	84 e0       	ldi	r24, 0x04	; 4
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
		waitForOk();
    12c6:	0e 94 2b 07 	call	0xe56	; 0xe56 <waitForOk>
		return 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0a c0       	rjmp	.+20     	; 0x12e4 <main+0x98>
	}
//	nSensors = search_sensors();
//	lcd_put_num(nSensors);
//	lcd_puts(" tmp");

	lcd_gotoxy(0,1);
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d8:	81 e2       	ldi	r24, 0x21	; 33
    12da:	8a 95       	dec	r24
    12dc:	f1 f7       	brne	.-4      	; 0x12da <main+0x8e>
    12de:	00 00       	nop
//		{
//			turn_off_mash_heater();
//		}
//	}

	return 0;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
}
    12e4:	6b 96       	adiw	r28, 0x1b	; 27
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	08 95       	ret

000012f8 <getValueFromInput>:
	return val;
}

int8_t getValueFromInput()
{
	uint8_t btn = readButtons();
    12f8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <readButtons>
	uint8_t val = -99;
	switch( btn )
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	51 f0       	breq	.+20     	; 0x1314 <getValueFromInput+0x1c>
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	21 f0       	breq	.+8      	; 0x130c <getValueFromInput+0x14>
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	21 f0       	breq	.+8      	; 0x1310 <getValueFromInput+0x18>
}

int8_t getValueFromInput()
{
	uint8_t btn = readButtons();
	uint8_t val = -99;
    1308:	8d e9       	ldi	r24, 0x9D	; 157
    130a:	08 95       	ret
	{
	case BTN_UP:
		val = 1;
		break;
	case BTN_DOWN:
		val = -1;
    130c:	8f ef       	ldi	r24, 0xFF	; 255
		break;
    130e:	08 95       	ret
	case BTN_OK:
		val = 0;
    1310:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1312:	08 95       	ret
	uint8_t btn = readButtons();
	uint8_t val = -99;
	switch( btn )
	{
	case BTN_UP:
		val = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
	default:
		break;
	}

	return val;
}
    1316:	08 95       	ret

00001318 <printStringAndNum>:

void printStringAndNum(const char * str, uint8_t tmp)
{
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	16 2f       	mov	r17, r22
	lcd_gotoxy(0,0);
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	lcd_puts(str);
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 80 05 	call	0xb00	; 0xb00 <lcd_puts>
	lcd_gotoxy(0,1);
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 55 05 	call	0xaaa	; 0xaaa <lcd_gotoxy>
	lcd_put_num(tmp);
    1338:	81 2f       	mov	r24, r17
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <lcd_put_num>
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	08 95       	ret

00001348 <getUserValueWithString>:

#include "buttons.h"
#include "lcd.h"

uint8_t getUserValueWithString(const char * str, uint8_t max, uint8_t min, uint8_t delta)
{
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
    1360:	f6 2e       	mov	r15, r22
    1362:	d4 2e       	mov	r13, r20
    1364:	a2 2e       	mov	r10, r18
		printStringAndNum(str,val);
		switch( btn )
		{
		case BTN_UP:
			val += delta;
			break;
    1366:	e1 2c       	mov	r14, r1
		case BTN_DOWN:
			val -= delta;
			break;
		case BTN_OK:
			done = 1;
    1368:	99 24       	eor	r9, r9
    136a:	93 94       	inc	r9
		default:
			break;
		}

		if(val > max)
			val = min;
    136c:	b4 2e       	mov	r11, r20
		if(val < min)
			val = max;
    136e:	c6 2e       	mov	r12, r22
{
	BOOL done = FALSE;
	uint8_t val;
	while( !done )
	{
		uint8_t btn = readButtons();
    1370:	0e 94 ff 06 	call	0xdfe	; 0xdfe <readButtons>
    1374:	08 2f       	mov	r16, r24
		printStringAndNum(str,val);
    1376:	61 2f       	mov	r22, r17
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 8c 09 	call	0x1318	; 0x1318 <printStringAndNum>
		switch( btn )
    137e:	02 30       	cpi	r16, 0x02	; 2
    1380:	31 f0       	breq	.+12     	; 0x138e <getUserValueWithString+0x46>
    1382:	03 30       	cpi	r16, 0x03	; 3
    1384:	39 f0       	breq	.+14     	; 0x1394 <getUserValueWithString+0x4c>
    1386:	01 30       	cpi	r16, 0x01	; 1
    1388:	41 f0       	breq	.+16     	; 0x139a <getUserValueWithString+0x52>
    138a:	8e 2d       	mov	r24, r14
    138c:	07 c0       	rjmp	.+14     	; 0x139c <getUserValueWithString+0x54>
		{
		case BTN_UP:
			val += delta;
    138e:	1a 0d       	add	r17, r10
			break;
    1390:	8e 2d       	mov	r24, r14
    1392:	04 c0       	rjmp	.+8      	; 0x139c <getUserValueWithString+0x54>
		case BTN_DOWN:
			val -= delta;
    1394:	1a 19       	sub	r17, r10
			break;
    1396:	8e 2d       	mov	r24, r14
    1398:	01 c0       	rjmp	.+2      	; 0x139c <getUserValueWithString+0x54>
		case BTN_OK:
			done = 1;
    139a:	89 2d       	mov	r24, r9
			break;
		default:
			break;
		}

		if(val > max)
    139c:	f1 16       	cp	r15, r17
    139e:	18 f0       	brcs	.+6      	; 0x13a6 <getUserValueWithString+0x5e>
			val = min;
		if(val < min)
    13a0:	1d 15       	cp	r17, r13
    13a2:	18 f0       	brcs	.+6      	; 0x13aa <getUserValueWithString+0x62>
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <getUserValueWithString+0x64>
		default:
			break;
		}

		if(val > max)
			val = min;
    13a6:	1b 2d       	mov	r17, r11
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <getUserValueWithString+0x64>
		if(val < min)
			val = max;
    13aa:	1c 2d       	mov	r17, r12

uint8_t getUserValueWithString(const char * str, uint8_t max, uint8_t min, uint8_t delta)
{
	BOOL done = FALSE;
	uint8_t val;
	while( !done )
    13ac:	88 23       	and	r24, r24
    13ae:	01 f3       	breq	.-64     	; 0x1370 <getUserValueWithString+0x28>
		if(val < min)
			val = max;
	}

	return val;
}
    13b0:	81 2f       	mov	r24, r17
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	9f 90       	pop	r9
    13c8:	08 95       	ret

000013ca <__umulhisi3>:
    13ca:	a2 9f       	mul	r26, r18
    13cc:	b0 01       	movw	r22, r0
    13ce:	b3 9f       	mul	r27, r19
    13d0:	c0 01       	movw	r24, r0
    13d2:	a3 9f       	mul	r26, r19
    13d4:	70 0d       	add	r23, r0
    13d6:	81 1d       	adc	r24, r1
    13d8:	11 24       	eor	r1, r1
    13da:	91 1d       	adc	r25, r1
    13dc:	b2 9f       	mul	r27, r18
    13de:	70 0d       	add	r23, r0
    13e0:	81 1d       	adc	r24, r1
    13e2:	11 24       	eor	r1, r1
    13e4:	91 1d       	adc	r25, r1
    13e6:	08 95       	ret

000013e8 <__divmodhi4>:
    13e8:	97 fb       	bst	r25, 7
    13ea:	07 2e       	mov	r0, r23
    13ec:	16 f4       	brtc	.+4      	; 0x13f2 <__divmodhi4+0xa>
    13ee:	00 94       	com	r0
    13f0:	07 d0       	rcall	.+14     	; 0x1400 <__divmodhi4_neg1>
    13f2:	77 fd       	sbrc	r23, 7
    13f4:	09 d0       	rcall	.+18     	; 0x1408 <__divmodhi4_neg2>
    13f6:	0e 94 27 0a 	call	0x144e	; 0x144e <__udivmodhi4>
    13fa:	07 fc       	sbrc	r0, 7
    13fc:	05 d0       	rcall	.+10     	; 0x1408 <__divmodhi4_neg2>
    13fe:	3e f4       	brtc	.+14     	; 0x140e <__divmodhi4_exit>

00001400 <__divmodhi4_neg1>:
    1400:	90 95       	com	r25
    1402:	81 95       	neg	r24
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	08 95       	ret

00001408 <__divmodhi4_neg2>:
    1408:	70 95       	com	r23
    140a:	61 95       	neg	r22
    140c:	7f 4f       	sbci	r23, 0xFF	; 255

0000140e <__divmodhi4_exit>:
    140e:	08 95       	ret

00001410 <__divmodsi4>:
    1410:	05 2e       	mov	r0, r21
    1412:	97 fb       	bst	r25, 7
    1414:	1e f4       	brtc	.+6      	; 0x141c <__divmodsi4+0xc>
    1416:	00 94       	com	r0
    1418:	0e 94 1f 0a 	call	0x143e	; 0x143e <__negsi2>
    141c:	57 fd       	sbrc	r21, 7
    141e:	07 d0       	rcall	.+14     	; 0x142e <__divmodsi4_neg2>
    1420:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__udivmodsi4>
    1424:	07 fc       	sbrc	r0, 7
    1426:	03 d0       	rcall	.+6      	; 0x142e <__divmodsi4_neg2>
    1428:	4e f4       	brtc	.+18     	; 0x143c <__divmodsi4_exit>
    142a:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__negsi2>

0000142e <__divmodsi4_neg2>:
    142e:	50 95       	com	r21
    1430:	40 95       	com	r20
    1432:	30 95       	com	r19
    1434:	21 95       	neg	r18
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	4f 4f       	sbci	r20, 0xFF	; 255
    143a:	5f 4f       	sbci	r21, 0xFF	; 255

0000143c <__divmodsi4_exit>:
    143c:	08 95       	ret

0000143e <__negsi2>:
    143e:	90 95       	com	r25
    1440:	80 95       	com	r24
    1442:	70 95       	com	r23
    1444:	61 95       	neg	r22
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	08 95       	ret

0000144e <__udivmodhi4>:
    144e:	aa 1b       	sub	r26, r26
    1450:	bb 1b       	sub	r27, r27
    1452:	51 e1       	ldi	r21, 0x11	; 17
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <__udivmodhi4_ep>

00001456 <__udivmodhi4_loop>:
    1456:	aa 1f       	adc	r26, r26
    1458:	bb 1f       	adc	r27, r27
    145a:	a6 17       	cp	r26, r22
    145c:	b7 07       	cpc	r27, r23
    145e:	10 f0       	brcs	.+4      	; 0x1464 <__udivmodhi4_ep>
    1460:	a6 1b       	sub	r26, r22
    1462:	b7 0b       	sbc	r27, r23

00001464 <__udivmodhi4_ep>:
    1464:	88 1f       	adc	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	5a 95       	dec	r21
    146a:	a9 f7       	brne	.-22     	; 0x1456 <__udivmodhi4_loop>
    146c:	80 95       	com	r24
    146e:	90 95       	com	r25
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	08 95       	ret

00001476 <__udivmodsi4>:
    1476:	a1 e2       	ldi	r26, 0x21	; 33
    1478:	1a 2e       	mov	r1, r26
    147a:	aa 1b       	sub	r26, r26
    147c:	bb 1b       	sub	r27, r27
    147e:	fd 01       	movw	r30, r26
    1480:	0d c0       	rjmp	.+26     	; 0x149c <__udivmodsi4_ep>

00001482 <__udivmodsi4_loop>:
    1482:	aa 1f       	adc	r26, r26
    1484:	bb 1f       	adc	r27, r27
    1486:	ee 1f       	adc	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	a2 17       	cp	r26, r18
    148c:	b3 07       	cpc	r27, r19
    148e:	e4 07       	cpc	r30, r20
    1490:	f5 07       	cpc	r31, r21
    1492:	20 f0       	brcs	.+8      	; 0x149c <__udivmodsi4_ep>
    1494:	a2 1b       	sub	r26, r18
    1496:	b3 0b       	sbc	r27, r19
    1498:	e4 0b       	sbc	r30, r20
    149a:	f5 0b       	sbc	r31, r21

0000149c <__udivmodsi4_ep>:
    149c:	66 1f       	adc	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	88 1f       	adc	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	1a 94       	dec	r1
    14a6:	69 f7       	brne	.-38     	; 0x1482 <__udivmodsi4_loop>
    14a8:	60 95       	com	r22
    14aa:	70 95       	com	r23
    14ac:	80 95       	com	r24
    14ae:	90 95       	com	r25
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	bd 01       	movw	r22, r26
    14b6:	cf 01       	movw	r24, r30
    14b8:	08 95       	ret

000014ba <itoa>:
    14ba:	fb 01       	movw	r30, r22
    14bc:	9f 01       	movw	r18, r30
    14be:	e8 94       	clt
    14c0:	42 30       	cpi	r20, 0x02	; 2
    14c2:	c4 f0       	brlt	.+48     	; 0x14f4 <itoa+0x3a>
    14c4:	45 32       	cpi	r20, 0x25	; 37
    14c6:	b4 f4       	brge	.+44     	; 0x14f4 <itoa+0x3a>
    14c8:	4a 30       	cpi	r20, 0x0A	; 10
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <itoa+0x1c>
    14cc:	97 fb       	bst	r25, 7
    14ce:	1e f4       	brtc	.+6      	; 0x14d6 <itoa+0x1c>
    14d0:	90 95       	com	r25
    14d2:	81 95       	neg	r24
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	64 2f       	mov	r22, r20
    14d8:	77 27       	eor	r23, r23
    14da:	0e 94 27 0a 	call	0x144e	; 0x144e <__udivmodhi4>
    14de:	80 5d       	subi	r24, 0xD0	; 208
    14e0:	8a 33       	cpi	r24, 0x3A	; 58
    14e2:	0c f0       	brlt	.+2      	; 0x14e6 <itoa+0x2c>
    14e4:	89 5d       	subi	r24, 0xD9	; 217
    14e6:	81 93       	st	Z+, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	a1 f7       	brne	.-24     	; 0x14d6 <itoa+0x1c>
    14ee:	16 f4       	brtc	.+4      	; 0x14f4 <itoa+0x3a>
    14f0:	5d e2       	ldi	r21, 0x2D	; 45
    14f2:	51 93       	st	Z+, r21
    14f4:	10 82       	st	Z, r1
    14f6:	c9 01       	movw	r24, r18
    14f8:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <strrev>

000014fc <strrev>:
    14fc:	dc 01       	movw	r26, r24
    14fe:	fc 01       	movw	r30, r24
    1500:	67 2f       	mov	r22, r23
    1502:	71 91       	ld	r23, Z+
    1504:	77 23       	and	r23, r23
    1506:	e1 f7       	brne	.-8      	; 0x1500 <strrev+0x4>
    1508:	32 97       	sbiw	r30, 0x02	; 2
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <strrev+0x18>
    150c:	7c 91       	ld	r23, X
    150e:	6d 93       	st	X+, r22
    1510:	70 83       	st	Z, r23
    1512:	62 91       	ld	r22, -Z
    1514:	ae 17       	cp	r26, r30
    1516:	bf 07       	cpc	r27, r31
    1518:	c8 f3       	brcs	.-14     	; 0x150c <strrev+0x10>
    151a:	08 95       	ret

0000151c <_exit>:
    151c:	f8 94       	cli

0000151e <__stop_program>:
    151e:	ff cf       	rjmp	.-2      	; 0x151e <__stop_program>
