
PIDController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000010ee  00001182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000c0  008000c0  000011e2  2**0
                  ALLOC
  3 .stab         00004074  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d5  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000682d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	75 c6       	rjmp	.+3306   	; 0xcf4 <__vector_4>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	ee ee       	ldi	r30, 0xEE	; 238
      36:	f0 e1       	ldi	r31, 0x10	; 16
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a0 3c       	cpi	r26, 0xC0	; 192
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	a0 ec       	ldi	r26, 0xC0	; 192
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ab 3e       	cpi	r26, 0xEB	; 235
      50:	b1 07       	cpc	r27, r17
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	01 d7       	rcall	.+3586   	; 0xe58 <main>
      56:	49 c8       	rjmp	.-3950   	; 0xfffff0ea <__eeprom_end+0xff7ef0ea>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
      5a:	61 15       	cp	r22, r1
      5c:	71 05       	cpc	r23, r1
      5e:	b9 f0       	breq	.+46     	; 0x8e <crc8+0x34>
      60:	e8 2f       	mov	r30, r24
      62:	f9 2f       	mov	r31, r25
#include <stdint.h>

#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data, uint16_t number_of_bytes_in_data )
      64:	6e 0f       	add	r22, r30
      66:	7f 1f       	adc	r23, r31
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
      68:	80 e0       	ldi	r24, 0x00	; 0

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
      6a:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
      6c:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
      6e:	21 91       	ld	r18, Z+
      70:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
      72:	32 2f       	mov	r19, r18
      74:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
      76:	30 ff       	sbrs	r19, 0
      78:	0c c0       	rjmp	.+24     	; 0x92 <crc8+0x38>
				crc = crc ^ CRC8POLY;
      7a:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
      7c:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
      7e:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
      80:	26 95       	lsr	r18
      82:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
      84:	b1 f7       	brne	.-20     	; 0x72 <crc8+0x18>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
      86:	e6 17       	cp	r30, r22
      88:	f7 07       	cpc	r31, r23
      8a:	89 f7       	brne	.-30     	; 0x6e <crc8+0x14>
      8c:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
      8e:	80 e0       	ldi	r24, 0x00	; 0
      90:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
      92:	86 95       	lsr	r24
      94:	f5 cf       	rjmp	.-22     	; 0x80 <crc8+0x26>

00000096 <util_create_addr>:
//	new_addr |= (addr & 0x20) << DATA_D5;
//	new_addr |= (addr & 0x40) << DATA_D6;
//	new_addr |= (addr & 0x80) << DATA_D7;

	return addr;
}
      96:	08 95       	ret

00000098 <ds12887_read_address>:

uint8_t ds12887_read_address(uint8_t addr)
{
	uint8_t sec = 0x0a;
	DDRC = 0xFF;
      98:	9f ef       	ldi	r25, 0xFF	; 255
      9a:	94 bb       	out	0x14, r25	; 20
	 // rtc_tris=0b11100000;//set the tris of C for setting address
	  //rtc_tris.ad=0x00; //set the tris of D for setting address
	  //rtc     =0b00011110;//set C for for setting address
	PORTE |= _BV(CTRL_AS);
      9c:	3a 9a       	sbi	0x07, 2	; 7
	PORTE |= _BV(CTRL_RW);
      9e:	39 9a       	sbi	0x07, 1	; 7
	PORTE |= _BV(CTRL_DS);
      a0:	38 9a       	sbi	0x07, 0	; 7
//	  rtc.ad=addr;      //put address on bus
	PORTC = addr;
      a2:	85 bb       	out	0x15, r24	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	fc 01       	movw	r30, r24
      aa:	31 97       	sbiw	r30, 0x01	; 1
      ac:	f1 f7       	brne	.-4      	; 0xaa <ds12887_read_address+0x12>
//	  rtc.ad=addr;      //put address on bus
	PORTC = addr;
	_delayFourCycles(1);
//	  #asm nop #endasm    //pause
//	rtc.as=0;           //latch
	PORTE &= ~(_BV(CTRL_AS));
      ae:	3a 98       	cbi	0x07, 2	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      b0:	fc 01       	movw	r30, r24
      b2:	31 97       	sbiw	r30, 0x01	; 1
      b4:	f1 f7       	brne	.-4      	; 0xb2 <ds12887_read_address+0x1a>
//	  #asm nop #endasm    //pause
//	rtc.as=0;           //latch
	PORTE &= ~(_BV(CTRL_AS));
	_delayFourCycles(1); // pause
//	  rtc_tris.ad=0xFF; //set the tris of D for reading data
	PORTC = 0x00;
      b6:	15 ba       	out	0x15, r1	; 21
	DDRC = 0x00;
      b8:	14 ba       	out	0x14, r1	; 20

//	  rtc.ds=0;           //release
	  PORTE &= ~(_BV(CTRL_DS));
      ba:	38 98       	cbi	0x07, 0	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      bc:	01 97       	sbiw	r24, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <ds12887_read_address+0x24>
//	  rtc.ds=0;           //release
	  PORTE &= ~(_BV(CTRL_DS));
//	  #asm nop #endasm    //pause
	  _delayFourCycles(1);
//	  data=rtc.ad;      //read the data from the bus
	  sec = PINC;
      c0:	83 b3       	in	r24, 0x13	; 19
//	_delay_us(1);

//	PORTE &= ~(_BV(CTRL_RW));

	return sec;
}
      c2:	08 95       	ret

000000c4 <ds12887_read_ds_control_d>:
	return ds12887_write_address(data,DS_CONTROL_B);
}

uint8_t ds12887_read_ds_control_d()
{
	return ds12887_read_address(DS_CONTROL_D);
      c4:	80 eb       	ldi	r24, 0xB0	; 176
      c6:	e8 df       	rcall	.-48     	; 0x98 <ds12887_read_address>
}
      c8:	08 95       	ret

000000ca <ds12887_read_ds_control_b>:
	return ds12887_write_address(data,DS_CONTROL_A);
}

uint8_t ds12887_read_ds_control_b()
{
	return ds12887_read_address(DS_CONTROL_B);
      ca:	80 ed       	ldi	r24, 0xD0	; 208
      cc:	e5 df       	rcall	.-54     	; 0x98 <ds12887_read_address>
}
      ce:	08 95       	ret

000000d0 <ds12887_read_ds_control_a>:
//
//void ds12887_read_minute();

uint8_t ds12887_read_ds_control_a()
{
	return ds12887_read_address(DS_CONTROL_A);
      d0:	80 e5       	ldi	r24, 0x50	; 80
      d2:	e2 df       	rcall	.-60     	; 0x98 <ds12887_read_address>
}
      d4:	08 95       	ret

000000d6 <ds12887_read_sec>:
}

uint8_t ds12887_read_sec()
{
	//set address on data port pins
	return ds12887_read_address(DS_SECONDS);
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	df df       	rcall	.-66     	; 0x98 <ds12887_read_address>


}
      da:	08 95       	ret

000000dc <ds12887_write_address>:


uint8_t ds12887_write_address(uint8_t data, uint8_t addr)
{
	//set dataport to output to write adress
	DDRC = 0xFF;
      dc:	9f ef       	ldi	r25, 0xFF	; 255
      de:	94 bb       	out	0x14, r25	; 20
	//_delay_us(1);

//	rtc_tris_w();
//	  rtc.cs_bar=0;//chip active
//	  rtc.ad=addr; //addr is on bus
	  PORTC = addr;//util_create_addr(addr);
      e0:	65 bb       	out	0x15, r22	; 21
//	  rtc.rw_bar=0;//write mode
	  PORTE &= ~(_BV(CTRL_RW));
      e2:	39 98       	cbi	0x07, 1	; 7

//	  rtc.ds=0;    //data strob idle
	  PORTE &= ~(_BV(CTRL_DS));
      e4:	38 98       	cbi	0x07, 0	; 7

//	  rtc.as=1;    //addr strob
	  PORTE |= _BV(CTRL_AS);
      e6:	3a 9a       	sbi	0x07, 2	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	31 97       	sbiw	r30, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <ds12887_write_address+0x12>
	  PORTE |= _BV(CTRL_AS);

	  _delayFourCycles(1); // pause

//	  rtc.as=0;    //latch address
	  PORTE &= ~(_BV(CTRL_AS));
      f2:	3a 98       	cbi	0x07, 2	; 7

//	  rtc.ds=1;    //data strob idle
	  PORTE |= _BV(CTRL_DS);
      f4:	38 9a       	sbi	0x07, 0	; 7

//	  rtc.ad=data; //data is on bus
	  PORTC = data;
      f6:	85 bb       	out	0x15, r24	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
      f8:	c9 01       	movw	r24, r18
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <ds12887_write_address+0x1e>

//	  rtc.ad=data; //data is on bus
	  PORTC = data;
	  _delayFourCycles(1);
//	  rtc.ds=0;    //latch data
	  PORTE &= ~(_BV(CTRL_DS));
      fe:	38 98       	cbi	0x07, 0	; 7

//	  rtc_tris_r(); //set the tris of C  and D to ALL INPUTS
	  DDRC = 0x00;
     100:	14 ba       	out	0x14, r1	; 20

	//_delay_us(1);


	return 0;
}
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	08 95       	ret

00000106 <ds12887_write_ds_control_b>:
	return ds12887_read_address(DS_CONTROL_B);
}

uint8_t ds12887_write_ds_control_b(uint8_t data)
{
	return ds12887_write_address(data,DS_CONTROL_B);
     106:	60 ed       	ldi	r22, 0xD0	; 208
     108:	e9 df       	rcall	.-46     	; 0xdc <ds12887_write_address>
}
     10a:	08 95       	ret

0000010c <ds12887_write_ds_control_a>:
	return ds12887_read_address(DS_CONTROL_A);
}

uint8_t ds12887_write_ds_control_a(uint8_t data)
{
	return ds12887_write_address(data,DS_CONTROL_A);
     10c:	60 e5       	ldi	r22, 0x50	; 80
     10e:	e6 df       	rcall	.-52     	; 0xdc <ds12887_write_address>
}
     110:	08 95       	ret

00000112 <ds12887_init>:
    	    : "0" (__count)
    	   );
}

void ds12887_init()
{
     112:	cf 93       	push	r28
	uint8_t data = 0x00;
	//set ctrl port to outpu
//	DDR(CTRL_PORT)  |= _BV(CTRL_AS);
//    DDR(CTRL_PORT)  |= _BV(CTRL_DS);
//    DDR(CTRL_PORT)  |= _BV(CTRL_RW);
	DDRE = 0xFF;
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	86 b9       	out	0x06, r24	; 6
    PORTE &= ~(_BV(CTRL_AS));
     118:	3a 98       	cbi	0x07, 2	; 7
	PORTC &= ~(_BV(CTRL_DS));
     11a:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~(_BV(CTRL_RW));
     11c:	a9 98       	cbi	0x15, 1	; 21

    //start oscillator and set in BCM mode
    do{
    	data = ds12887_read_ds_control_a();
     11e:	d8 df       	rcall	.-80     	; 0xd0 <ds12887_read_ds_control_a>
    }while(data & DS_A_UIP);
     120:	88 23       	and	r24, r24
     122:	ec f3       	brlt	.-6      	; 0x11e <ds12887_init+0xc>

    data = ds12887_read_ds_control_d();
     124:	cf df       	rcall	.-98     	; 0xc4 <ds12887_read_ds_control_d>
    if(data & DS_D_VRT)
     126:	88 23       	and	r24, r24
     128:	24 f4       	brge	.+8      	; 0x132 <ds12887_init+0x20>
    	lcd_puts("vrt OK");
     12a:	84 e6       	ldi	r24, 0x64	; 100
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	81 d4       	rcall	.+2306   	; 0xa32 <lcd_puts>
     130:	03 c0       	rjmp	.+6      	; 0x138 <ds12887_init+0x26>
    else
    	lcd_puts("vrt bad");
     132:	8b e6       	ldi	r24, 0x6B	; 107
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	7d d4       	rcall	.+2298   	; 0xa32 <lcd_puts>

    data &= ~(DS_A_DV0 | DS_A_DV1 | DS_A_DV2);
    data |= DS_A_DV1;
    data = 0xF4;
    ds12887_write_ds_control_a(data);
     138:	84 ef       	ldi	r24, 0xF4	; 244
     13a:	e8 df       	rcall	.-48     	; 0x10c <ds12887_write_ds_control_a>

    data = ds12887_read_ds_control_a();
     13c:	c9 df       	rcall	.-110    	; 0xd0 <ds12887_read_ds_control_a>
     13e:	c8 2f       	mov	r28, r24
    lcd_gotoxy(0,1);
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	53 d4       	rcall	.+2214   	; 0x9ec <lcd_gotoxy>
    lcd_puts("ca:");
     146:	83 e7       	ldi	r24, 0x73	; 115
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	73 d4       	rcall	.+2278   	; 0xa32 <lcd_puts>
    lcd_put_num(data);
     14c:	8c 2f       	mov	r24, r28
     14e:	7e d4       	rcall	.+2300   	; 0xa4c <lcd_put_num>
    data = 0x00;
    //data = ds12887_read_ds_control_b();
   	/* Switch to binary mode from BCD */
   	data &= ~(DS_B_DM);
   	data |= DS_B_SQWE;
   	ds12887_write_ds_control_b(data);
     150:	88 e0       	ldi	r24, 0x08	; 8
     152:	d9 df       	rcall	.-78     	; 0x106 <ds12887_write_ds_control_b>
}
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <DS18X20_raw_to_decicelsius>:

#if DS18X20_DECICELSIUS

/* convert scratchpad data to physical value in unit decicelsius */
static int16_t DS18X20_raw_to_decicelsius( uint8_t familycode, uint8_t sp[] )
{
     158:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int16_t  decicelsius;
	uint16_t fract;

	measure = sp[0] | (sp[1] << 8);
     15a:	31 81       	ldd	r19, Z+1	; 0x01
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	90 81       	ld	r25, Z
     160:	29 2b       	or	r18, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
     162:	80 31       	cpi	r24, 0x10	; 16
     164:	79 f4       	brne	.+30     	; 0x184 <DS18X20_raw_to_decicelsius+0x2c>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
     166:	2e 7f       	andi	r18, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
     168:	a9 01       	movw	r20, r18
     16a:	44 0f       	add	r20, r20
     16c:	55 1f       	adc	r21, r21
     16e:	44 0f       	add	r20, r20
     170:	55 1f       	adc	r21, r21
     172:	44 0f       	add	r20, r20
     174:	55 1f       	adc	r21, r21
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
     176:	96 81       	ldd	r25, Z+6	; 0x06
     178:	2c e0       	ldi	r18, 0x0C	; 12
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	29 1b       	sub	r18, r25
     17e:	31 09       	sbc	r19, r1
     180:	24 0f       	add	r18, r20
     182:	35 1f       	adc	r19, r21
	}

	// check for negative 
	if ( measure & 0x8000 )  {
     184:	33 23       	and	r19, r19
     186:	2c f4       	brge	.+10     	; 0x192 <DS18X20_raw_to_decicelsius+0x3a>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
     188:	31 95       	neg	r19
     18a:	21 95       	neg	r18
     18c:	31 09       	sbc	r19, r1
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	01 c0       	rjmp	.+2      	; 0x194 <DS18X20_raw_to_decicelsius+0x3c>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
     192:	60 e0       	ldi	r22, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
     194:	88 32       	cpi	r24, 0x28	; 40
     196:	11 f0       	breq	.+4      	; 0x19c <DS18X20_raw_to_decicelsius+0x44>
     198:	82 32       	cpi	r24, 0x22	; 34
     19a:	69 f4       	brne	.+26     	; 0x1b6 <DS18X20_raw_to_decicelsius+0x5e>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	80 76       	andi	r24, 0x60	; 96
     1a0:	80 32       	cpi	r24, 0x20	; 32
     1a2:	31 f0       	breq	.+12     	; 0x1b0 <DS18X20_raw_to_decicelsius+0x58>
     1a4:	80 34       	cpi	r24, 0x40	; 64
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <DS18X20_raw_to_decicelsius+0x5c>
     1a8:	81 11       	cpse	r24, r1
     1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
     1ac:	28 7f       	andi	r18, 0xF8	; 248
			break;
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
     1b0:	2c 7f       	andi	r18, 0xFC	; 252
			break;
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DS18X20_raw_to_decicelsius+0x5e>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
     1b4:	2e 7f       	andi	r18, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	decicelsius = (measure >> 4);
     1b6:	c9 01       	movw	r24, r18
     1b8:	92 95       	swap	r25
     1ba:	82 95       	swap	r24
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	89 27       	eor	r24, r25
     1c0:	9f 70       	andi	r25, 0x0F	; 15
     1c2:	89 27       	eor	r24, r25
	decicelsius *= 10;
     1c4:	ac 01       	movw	r20, r24
     1c6:	44 0f       	add	r20, r20
     1c8:	55 1f       	adc	r21, r21
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	84 0f       	add	r24, r20
     1d8:	95 1f       	adc	r25, r21

	// decicelsius += ((measure & 0x000F) * 640 + 512) / 1024;
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
     1da:	2f 70       	andi	r18, 0x0F	; 15
     1dc:	33 27       	eor	r19, r19
     1de:	a9 01       	movw	r20, r18
     1e0:	56 95       	lsr	r21
     1e2:	54 2f       	mov	r21, r20
     1e4:	44 27       	eor	r20, r20
     1e6:	57 95       	ror	r21
     1e8:	47 95       	ror	r20
     1ea:	32 2f       	mov	r19, r18
     1ec:	22 27       	eor	r18, r18
     1ee:	33 0f       	add	r19, r19
     1f0:	24 0f       	add	r18, r20
     1f2:	35 1f       	adc	r19, r21
	if ( !negative ) {
     1f4:	61 11       	cpse	r22, r1
     1f6:	12 c0       	rjmp	.+36     	; 0x21c <DS18X20_raw_to_decicelsius+0xc4>
		fract += 512;
     1f8:	3e 5f       	subi	r19, 0xFE	; 254
	}
	fract /= 1024;
     1fa:	23 2f       	mov	r18, r19
     1fc:	33 27       	eor	r19, r19
     1fe:	26 95       	lsr	r18
     200:	26 95       	lsr	r18
	decicelsius += fract;
     202:	28 0f       	add	r18, r24
     204:	39 1f       	adc	r19, r25

	if ( negative ) {
		decicelsius = -decicelsius;
	}

	if ( /* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250 ) {
     206:	c9 01       	movw	r24, r18
     208:	8a 5d       	subi	r24, 0xDA	; 218
     20a:	9d 4f       	sbci	r25, 0xFD	; 253
     20c:	89 30       	cpi	r24, 0x09	; 9
     20e:	97 40       	sbci	r25, 0x07	; 7
     210:	10 f0       	brcs	.+4      	; 0x216 <DS18X20_raw_to_decicelsius+0xbe>
		return DS18X20_INVALID_DECICELSIUS;
     212:	20 ed       	ldi	r18, 0xD0	; 208
     214:	37 e0       	ldi	r19, 0x07	; 7
     216:	82 2f       	mov	r24, r18
     218:	93 2f       	mov	r25, r19
     21a:	08 95       	ret
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
	if ( !negative ) {
		fract += 512;
	}
	fract /= 1024;
     21c:	23 2f       	mov	r18, r19
     21e:	33 27       	eor	r19, r19
     220:	26 95       	lsr	r18
     222:	26 95       	lsr	r18
	decicelsius += fract;
     224:	82 0f       	add	r24, r18
     226:	93 1f       	adc	r25, r19

	if ( negative ) {
		decicelsius = -decicelsius;
     228:	22 27       	eor	r18, r18
     22a:	33 27       	eor	r19, r19
     22c:	28 1b       	sub	r18, r24
     22e:	39 0b       	sbc	r19, r25
     230:	ea cf       	rjmp	.-44     	; 0x206 <DS18X20_raw_to_decicelsius+0xae>

00000232 <DS18X20_raw_to_maxres>:


#if DS18X20_MAX_RESOLUTION

static int32_t DS18X20_raw_to_maxres( uint8_t familycode, uint8_t sp[] )
{
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int32_t  temperaturevalue;

	measure = sp[0] | (sp[1] << 8);
     242:	51 81       	ldd	r21, Z+1	; 0x01
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	90 81       	ld	r25, Z
     248:	49 2b       	or	r20, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
     24a:	80 31       	cpi	r24, 0x10	; 16
     24c:	79 f4       	brne	.+30     	; 0x26c <__stack+0xd>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
     24e:	4e 7f       	andi	r20, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
     250:	9a 01       	movw	r18, r20
     252:	22 0f       	add	r18, r18
     254:	33 1f       	adc	r19, r19
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
		measure += ( 16 - sp[6] ) - 4; // Add the compensation and remember to subtract 0.25 degree (4/16)
     25e:	96 81       	ldd	r25, Z+6	; 0x06
     260:	4c e0       	ldi	r20, 0x0C	; 12
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	49 1b       	sub	r20, r25
     266:	51 09       	sbc	r21, r1
     268:	42 0f       	add	r20, r18
     26a:	53 1f       	adc	r21, r19
	}

	// check for negative 
	if ( measure & 0x8000 )  {
     26c:	55 23       	and	r21, r21
     26e:	2c f4       	brge	.+10     	; 0x27a <__stack+0x1b>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
     270:	51 95       	neg	r21
     272:	41 95       	neg	r20
     274:	51 09       	sbc	r21, r1
		measure += ( 16 - sp[6] ) - 4; // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
     276:	c1 e0       	ldi	r28, 0x01	; 1
     278:	01 c0       	rjmp	.+2      	; 0x27c <__stack+0x1d>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
     27a:	c0 e0       	ldi	r28, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
     27c:	88 32       	cpi	r24, 0x28	; 40
     27e:	11 f0       	breq	.+4      	; 0x284 <__stack+0x25>
     280:	82 32       	cpi	r24, 0x22	; 34
     282:	69 f4       	brne	.+26     	; 0x29e <__stack+0x3f>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
     284:	84 81       	ldd	r24, Z+4	; 0x04
     286:	80 76       	andi	r24, 0x60	; 96
     288:	80 32       	cpi	r24, 0x20	; 32
     28a:	31 f0       	breq	.+12     	; 0x298 <__stack+0x39>
     28c:	80 34       	cpi	r24, 0x40	; 64
     28e:	31 f0       	breq	.+12     	; 0x29c <__stack+0x3d>
     290:	81 11       	cpse	r24, r1
     292:	05 c0       	rjmp	.+10     	; 0x29e <__stack+0x3f>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
     294:	48 7f       	andi	r20, 0xF8	; 248
			break;
     296:	03 c0       	rjmp	.+6      	; 0x29e <__stack+0x3f>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
     298:	4c 7f       	andi	r20, 0xFC	; 252
			break;
     29a:	01 c0       	rjmp	.+2      	; 0x29e <__stack+0x3f>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
     29c:	4e 7f       	andi	r20, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	temperaturevalue  = (measure >> 4);
     29e:	9a 01       	movw	r18, r20
     2a0:	32 95       	swap	r19
     2a2:	22 95       	swap	r18
     2a4:	2f 70       	andi	r18, 0x0F	; 15
     2a6:	23 27       	eor	r18, r19
     2a8:	3f 70       	andi	r19, 0x0F	; 15
     2aa:	23 27       	eor	r18, r19
	temperaturevalue *= 10000;
     2ac:	a0 e1       	ldi	r26, 0x10	; 16
     2ae:	b7 e2       	ldi	r27, 0x27	; 39
     2b0:	7d d6       	rcall	.+3322   	; 0xfac <__umulhisi3>
	temperaturevalue +=( measure & 0x000F ) * DS18X20_FRACCONV;
     2b2:	4f 70       	andi	r20, 0x0F	; 15
     2b4:	55 27       	eor	r21, r21
     2b6:	e1 e7       	ldi	r30, 0x71	; 113
     2b8:	f2 e0       	ldi	r31, 0x02	; 2
     2ba:	4e 9f       	mul	r20, r30
     2bc:	90 01       	movw	r18, r0
     2be:	4f 9f       	mul	r20, r31
     2c0:	30 0d       	add	r19, r0
     2c2:	5e 9f       	mul	r21, r30
     2c4:	30 0d       	add	r19, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	6b 01       	movw	r12, r22
     2ca:	7c 01       	movw	r14, r24
     2cc:	c2 0e       	add	r12, r18
     2ce:	d3 1e       	adc	r13, r19
     2d0:	e1 1c       	adc	r14, r1
     2d2:	f1 1c       	adc	r15, r1
     2d4:	97 01       	movw	r18, r14
     2d6:	86 01       	movw	r16, r12

	if ( negative ) {
     2d8:	cc 23       	and	r28, r28
     2da:	39 f0       	breq	.+14     	; 0x2ea <__stack+0x8b>
		temperaturevalue = -temperaturevalue;
     2dc:	30 95       	com	r19
     2de:	20 95       	com	r18
     2e0:	10 95       	com	r17
     2e2:	01 95       	neg	r16
     2e4:	1f 4f       	sbci	r17, 0xFF	; 255
     2e6:	2f 4f       	sbci	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	return temperaturevalue;
}
     2ea:	60 2f       	mov	r22, r16
     2ec:	71 2f       	mov	r23, r17
     2ee:	82 2f       	mov	r24, r18
     2f0:	93 2f       	mov	r25, r19
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	08 95       	ret

00000302 <read_scratchpad>:
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	e6 2e       	mov	r14, r22
     312:	f7 2e       	mov	r15, r23
     314:	d4 2e       	mov	r13, r20
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
     316:	bc 01       	movw	r22, r24
     318:	8e eb       	ldi	r24, 0xBE	; 190
     31a:	e6 d4       	rcall	.+2508   	; 0xce8 <ow_command>
	for ( i = 0; i < n; i++ ) {
     31c:	dd 20       	and	r13, r13
     31e:	69 f0       	breq	.+26     	; 0x33a <read_scratchpad+0x38>
     320:	ce 2d       	mov	r28, r14
     322:	df 2d       	mov	r29, r15
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
     324:	8e 01       	movw	r16, r28
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
     32a:	da 94       	dec	r13
     32c:	0d 0d       	add	r16, r13
     32e:	11 1d       	adc	r17, r1
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
		sp[i] = ow_byte_rd();
     330:	85 d4       	rcall	.+2314   	; 0xc3c <ow_byte_rd>
     332:	89 93       	st	Y+, r24
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
     334:	c0 17       	cp	r28, r16
     336:	d1 07       	cpc	r29, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <read_scratchpad+0x2e>
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
     33a:	69 e0       	ldi	r22, 0x09	; 9
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	8e 2d       	mov	r24, r14
     340:	9f 2d       	mov	r25, r15
     342:	8b de       	rcall	.-746    	; 0x5a <crc8>
     344:	88 23       	and	r24, r24
     346:	11 f0       	breq	.+4      	; 0x34c <read_scratchpad+0x4a>
		ret = DS18X20_ERROR_CRC;
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	01 c0       	rjmp	.+2      	; 0x34e <read_scratchpad+0x4c>
	} else {
		ret = DS18X20_OK;
     34c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ret;
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	08 95       	ret

0000035e <DS18X20_find_sensor>:
/* find DS18X20 Sensors on 1-Wire-Bus
   input/ouput: diff is the result of the last rom-search
                *diff = OW_SEARCH_FIRST for first call
   output: id is the rom-code of the sensor found */
uint8_t DS18X20_find_sensor( uint8_t *diff, uint8_t id[] )
{
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
     368:	8b 01       	movw	r16, r22
	uint8_t ret;

	ret = DS18X20_OK;
	go = 1;
	do {
		*diff = ow_rom_search( *diff, &id[0] );
     36a:	b8 01       	movw	r22, r16
     36c:	88 81       	ld	r24, Y
     36e:	69 d4       	rcall	.+2258   	; 0xc42 <ow_rom_search>
     370:	88 83       	st	Y, r24
		if ( *diff == OW_PRESENCE_ERR || *diff == OW_DATA_ERR ||
     372:	81 50       	subi	r24, 0x01	; 1
     374:	8d 3f       	cpi	r24, 0xFD	; 253
     376:	50 f4       	brcc	.+20     	; 0x38c <DS18X20_find_sensor+0x2e>
		     *diff == OW_LAST_DEVICE ) { 
			go  = 0;
			ret = DS18X20_ERROR;
		} else {
			if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE ||
     378:	f8 01       	movw	r30, r16
     37a:	80 81       	ld	r24, Z
     37c:	88 32       	cpi	r24, 0x28	; 40
     37e:	41 f0       	breq	.+16     	; 0x390 <DS18X20_find_sensor+0x32>
     380:	80 31       	cpi	r24, 0x10	; 16
     382:	41 f0       	breq	.+16     	; 0x394 <DS18X20_find_sensor+0x36>
     384:	82 32       	cpi	r24, 0x22	; 34
     386:	89 f7       	brne	.-30     	; 0x36a <DS18X20_find_sensor+0xc>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	05 c0       	rjmp	.+10     	; 0x396 <DS18X20_find_sensor+0x38>
	do {
		*diff = ow_rom_search( *diff, &id[0] );
		if ( *diff == OW_PRESENCE_ERR || *diff == OW_DATA_ERR ||
		     *diff == OW_LAST_DEVICE ) { 
			go  = 0;
			ret = DS18X20_ERROR;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	03 c0       	rjmp	.+6      	; 0x396 <DS18X20_find_sensor+0x38>
		} else {
			if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE ||
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	01 c0       	rjmp	.+2      	; 0x396 <DS18X20_find_sensor+0x38>
     394:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	} while (go);

	return ret;
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	08 95       	ret

000003a0 <DS18X20_get_power_status>:

/* get power status of DS18x20 
   input:   id = rom_code 
   returns: DS18X20_POWER_EXTERN or DS18X20_POWER_PARASITE */
uint8_t DS18X20_get_power_status( uint8_t id[] )
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
	uint8_t pstat;

	ow_reset();
     3a6:	de d3       	rcall	.+1980   	; 0xb64 <ow_reset>
	ow_command( DS18X20_READ_POWER_SUPPLY, id );
     3a8:	be 01       	movw	r22, r28
     3aa:	84 eb       	ldi	r24, 0xB4	; 180
     3ac:	9d d4       	rcall	.+2362   	; 0xce8 <ow_command>
	pstat = ow_bit_io( 1 );
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	f2 d3       	rcall	.+2020   	; 0xb96 <ow_bit_io>
     3b2:	c8 2f       	mov	r28, r24
	ow_reset();
     3b4:	d7 d3       	rcall	.+1966   	; 0xb64 <ow_reset>
	return ( pstat ) ? DS18X20_POWER_EXTERN : DS18X20_POWER_PARASITE;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	c1 11       	cpse	r28, r1
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <DS18X20_get_power_status+0x1e>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	18 2f       	mov	r17, r24
     3cc:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
     3ce:	ca d3       	rcall	.+1940   	; 0xb64 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     3d0:	9c d3       	rcall	.+1848   	; 0xb0a <ow_input_pin_state>
     3d2:	88 23       	and	r24, r24
     3d4:	61 f0       	breq	.+24     	; 0x3ee <DS18X20_start_meas+0x2a>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
     3d6:	11 30       	cpi	r17, 0x01	; 1
     3d8:	29 f0       	breq	.+10     	; 0x3e4 <DS18X20_start_meas+0x20>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
     3da:	be 01       	movw	r22, r28
     3dc:	84 e4       	ldi	r24, 0x44	; 68
     3de:	87 d4       	rcall	.+2318   	; 0xcee <ow_command_with_parasite_enable>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
		}
		ret = DS18X20_OK;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <DS18X20_start_meas+0x2c>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
     3e4:	be 01       	movw	r22, r28
     3e6:	84 e4       	ldi	r24, 0x44	; 68
     3e8:	7f d4       	rcall	.+2302   	; 0xce8 <ow_command>
		}
		ret = DS18X20_OK;
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <DS18X20_start_meas+0x2c>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ret;
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	08 95       	ret

000003f8 <DS18X20_conversion_in_progress>:

// returns 1 if conversion is in progress, 0 if finished
// not available when parasite powered.
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	cd d3       	rcall	.+1946   	; 0xb96 <ow_bit_io>
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	81 11       	cpse	r24, r1
     400:	90 e0       	ldi	r25, 0x00	; 0
}
     402:	89 2f       	mov	r24, r25
     404:	08 95       	ret

00000406 <DS18X20_format_from_decicelsius>:
/* format decicelsius-value into string, itoa method inspired 
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	27 97       	sbiw	r28, 0x07	; 7
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	8b 01       	movw	r16, r22
	uint8_t str_loc = 0;
	div_t dt;
	uint8_t ret;

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {
     424:	47 30       	cpi	r20, 0x07	; 7
     426:	08 f4       	brcc	.+2      	; 0x42a <DS18X20_format_from_decicelsius+0x24>
     428:	5e c0       	rjmp	.+188    	; 0x4e6 <DS18X20_format_from_decicelsius+0xe0>
     42a:	89 31       	cpi	r24, 0x19	; 25
     42c:	2c ef       	ldi	r18, 0xFC	; 252
     42e:	92 07       	cpc	r25, r18
     430:	0c f4       	brge	.+2      	; 0x434 <DS18X20_format_from_decicelsius+0x2e>
     432:	5b c0       	rjmp	.+182    	; 0x4ea <DS18X20_format_from_decicelsius+0xe4>
     434:	80 31       	cpi	r24, 0x10	; 16
     436:	27 e2       	ldi	r18, 0x27	; 39
     438:	92 07       	cpc	r25, r18
     43a:	0c f0       	brlt	.+2      	; 0x43e <DS18X20_format_from_decicelsius+0x38>
     43c:	58 c0       	rjmp	.+176    	; 0x4ee <DS18X20_format_from_decicelsius+0xe8>

		if ( decicelsius < 0) {
     43e:	99 23       	and	r25, r25
     440:	34 f4       	brge	.+12     	; 0x44e <DS18X20_format_from_decicelsius+0x48>
			sign = 1;
			decicelsius = -decicelsius;
     442:	91 95       	neg	r25
     444:	81 95       	neg	r24
     446:	91 09       	sbc	r25, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
     448:	ee 24       	eor	r14, r14
     44a:	e3 94       	inc	r14
     44c:	01 c0       	rjmp	.+2      	; 0x450 <DS18X20_format_from_decicelsius+0x4a>
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
	uint8_t sign = 0;
     44e:	e1 2c       	mov	r14, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
     450:	f1 2c       	mov	r15, r1
			decicelsius = -decicelsius;
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
     452:	6a e0       	ldi	r22, 0x0A	; 10
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	b6 d5       	rcall	.+2924   	; 0xfc4 <__divmodhi4>
			temp[temp_loc++] = dt.rem + '0';
     458:	e1 e0       	ldi	r30, 0x01	; 1
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ec 0f       	add	r30, r28
     45e:	fd 1f       	adc	r31, r29
     460:	ef 0d       	add	r30, r15
     462:	f1 1d       	adc	r31, r1
     464:	f7 fc       	sbrc	r15, 7
     466:	fa 95       	dec	r31
     468:	80 5d       	subi	r24, 0xD0	; 208
     46a:	80 83       	st	Z, r24
     46c:	f3 94       	inc	r15
			decicelsius = dt.quot;
     46e:	86 2f       	mov	r24, r22
     470:	97 2f       	mov	r25, r23
		} while ( decicelsius > 0 );
     472:	18 16       	cp	r1, r24
     474:	19 06       	cpc	r1, r25
     476:	6c f3       	brlt	.-38     	; 0x452 <DS18X20_format_from_decicelsius+0x4c>
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
			temp[temp_loc++] = dt.rem + '0';
     478:	8f 2d       	mov	r24, r15
			decicelsius = dt.quot;
		} while ( decicelsius > 0 );

		if ( sign ) {
     47a:	ee 20       	and	r14, r14
     47c:	59 f0       	breq	.+22     	; 0x494 <DS18X20_format_from_decicelsius+0x8e>
			temp[temp_loc] = '-';
     47e:	fe 01       	movw	r30, r28
     480:	ef 0d       	add	r30, r15
     482:	f1 1d       	adc	r31, r1
     484:	f7 fc       	sbrc	r15, 7
     486:	fa 95       	dec	r31
     488:	9d e2       	ldi	r25, 0x2D	; 45
     48a:	91 83       	std	Z+1, r25	; 0x01
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     48c:	88 23       	and	r24, r24
     48e:	64 f4       	brge	.+24     	; 0x4a8 <DS18X20_format_from_decicelsius+0xa2>
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	23 c0       	rjmp	.+70     	; 0x4da <DS18X20_format_from_decicelsius+0xd4>

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			///temp_loc--;
			temp[temp_loc] = '+';
     494:	fe 01       	movw	r30, r28
     496:	ef 0d       	add	r30, r15
     498:	f1 1d       	adc	r31, r1
     49a:	f7 fc       	sbrc	r15, 7
     49c:	fa 95       	dec	r31
     49e:	9b e2       	ldi	r25, 0x2B	; 43
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	f4 cf       	rjmp	.-24     	; 0x48c <DS18X20_format_from_decicelsius+0x86>
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     4a4:	89 2f       	mov	r24, r25
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DS18X20_format_from_decicelsius+0xa6>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     4a8:	80 e0       	ldi	r24, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     4aa:	2e e2       	ldi	r18, 0x2E	; 46
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     4ac:	f8 01       	movw	r30, r16
     4ae:	e8 0f       	add	r30, r24
     4b0:	f1 1d       	adc	r31, r1
     4b2:	a1 e0       	ldi	r26, 0x01	; 1
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	ac 0f       	add	r26, r28
     4b8:	bd 1f       	adc	r27, r29
     4ba:	af 0d       	add	r26, r15
     4bc:	b1 1d       	adc	r27, r1
     4be:	9c 91       	ld	r25, X
     4c0:	90 83       	st	Z, r25
     4c2:	98 2f       	mov	r25, r24
     4c4:	9f 5f       	subi	r25, 0xFF	; 255
     4c6:	fa 94       	dec	r15
			if ( temp_loc == 0 ) {
     4c8:	31 f4       	brne	.+12     	; 0x4d6 <DS18X20_format_from_decicelsius+0xd0>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     4ca:	f8 01       	movw	r30, r16
     4cc:	e9 0f       	add	r30, r25
     4ce:	f1 1d       	adc	r31, r1
     4d0:	20 83       	st	Z, r18
     4d2:	8e 5f       	subi	r24, 0xFE	; 254
     4d4:	eb cf       	rjmp	.-42     	; 0x4ac <DS18X20_format_from_decicelsius+0xa6>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
     4d6:	ff 20       	and	r15, r15
     4d8:	2c f7       	brge	.-54     	; 0x4a4 <DS18X20_format_from_decicelsius+0x9e>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
     4da:	f8 01       	movw	r30, r16
     4dc:	e9 0f       	add	r30, r25
     4de:	f1 1d       	adc	r31, r1
     4e0:	10 82       	st	Z, r1

		ret = DS18X20_OK;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <DS18X20_format_from_decicelsius+0xea>
	} else {
		ret = DS18X20_ERROR;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <DS18X20_format_from_decicelsius+0xea>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <DS18X20_format_from_decicelsius+0xea>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
     4f0:	27 96       	adiw	r28, 0x07	; 7
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <DS18X20_read_decicelsius>:

/* reads temperature (scratchpad) of sensor with rom-code id
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius( uint8_t id[], int16_t *decicelsius )
{
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	29 97       	sbiw	r28, 0x09	; 9
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	8c 01       	movw	r16, r24
     52a:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ow_reset();
     52c:	1b d3       	rcall	.+1590   	; 0xb64 <ow_reset>
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
     52e:	49 e0       	ldi	r20, 0x09	; 9
     530:	be 01       	movw	r22, r28
     532:	6f 5f       	subi	r22, 0xFF	; 255
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	c8 01       	movw	r24, r16
     538:	e4 de       	rcall	.-568    	; 0x302 <read_scratchpad>
     53a:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
     53c:	81 11       	cpse	r24, r1
     53e:	09 c0       	rjmp	.+18     	; 0x552 <DS18X20_read_decicelsius+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
     540:	be 01       	movw	r22, r28
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	f8 01       	movw	r30, r16
     548:	80 81       	ld	r24, Z
     54a:	06 de       	rcall	.-1012   	; 0x158 <DS18X20_raw_to_decicelsius>
     54c:	f7 01       	movw	r30, r14
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
	}
	return ret;
}
     552:	8d 2d       	mov	r24, r13
     554:	29 96       	adiw	r28, 0x09	; 9
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	08 95       	ret

00000570 <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	29 97       	sbiw	r28, 0x09	; 9
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	e8 2e       	mov	r14, r24
     58e:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     590:	49 e0       	ldi	r20, 0x09	; 9
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	b2 de       	rcall	.-668    	; 0x302 <read_scratchpad>
     59e:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
     5a0:	81 11       	cpse	r24, r1
     5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <DS18X20_read_decicelsius_single+0x44>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	8e 2d       	mov	r24, r14
     5ac:	d5 dd       	rcall	.-1110   	; 0x158 <DS18X20_raw_to_decicelsius>
     5ae:	f8 01       	movw	r30, r16
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
	}
	return ret;
}
     5b4:	8f 2d       	mov	r24, r15
     5b6:	29 96       	adiw	r28, 0x09	; 9
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <DS18X20_read_maxres>:

	return temperaturevalue;
}

uint8_t DS18X20_read_maxres( uint8_t id[], int32_t *temperaturevalue )
{
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	29 97       	sbiw	r28, 0x09	; 9
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	8c 01       	movw	r16, r24
     5f0:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ow_reset();
     5f2:	b8 d2       	rcall	.+1392   	; 0xb64 <ow_reset>
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
     5f4:	49 e0       	ldi	r20, 0x09	; 9
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	c8 01       	movw	r24, r16
     5fe:	81 de       	rcall	.-766    	; 0x302 <read_scratchpad>
     600:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
     602:	81 11       	cpse	r24, r1
     604:	0b c0       	rjmp	.+22     	; 0x61c <DS18X20_read_maxres+0x4c>
		*temperaturevalue = DS18X20_raw_to_maxres( id[0], sp );
     606:	be 01       	movw	r22, r28
     608:	6f 5f       	subi	r22, 0xFF	; 255
     60a:	7f 4f       	sbci	r23, 0xFF	; 255
     60c:	f8 01       	movw	r30, r16
     60e:	80 81       	ld	r24, Z
     610:	10 de       	rcall	.-992    	; 0x232 <DS18X20_raw_to_maxres>
     612:	f7 01       	movw	r30, r14
     614:	60 83       	st	Z, r22
     616:	71 83       	std	Z+1, r23	; 0x01
     618:	82 83       	std	Z+2, r24	; 0x02
     61a:	93 83       	std	Z+3, r25	; 0x03
	}
	return ret;
}
     61c:	8d 2d       	mov	r24, r13
     61e:	29 96       	adiw	r28, 0x09	; 9
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	08 95       	ret

0000063a <DS18X20_read_maxres_single>:

uint8_t DS18X20_read_maxres_single( uint8_t familycode, int32_t *temperaturevalue )
{
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	29 97       	sbiw	r28, 0x09	; 9
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	e8 2e       	mov	r14, r24
     658:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     65a:	49 e0       	ldi	r20, 0x09	; 9
     65c:	be 01       	movw	r22, r28
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	4d de       	rcall	.-870    	; 0x302 <read_scratchpad>
     668:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
     66a:	81 11       	cpse	r24, r1
     66c:	0a c0       	rjmp	.+20     	; 0x682 <DS18X20_read_maxres_single+0x48>
		*temperaturevalue = DS18X20_raw_to_maxres( familycode, sp );
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	8e 2d       	mov	r24, r14
     676:	dd dd       	rcall	.-1094   	; 0x232 <DS18X20_raw_to_maxres>
     678:	f8 01       	movw	r30, r16
     67a:	60 83       	st	Z, r22
     67c:	71 83       	std	Z+1, r23	; 0x01
     67e:	82 83       	std	Z+2, r24	; 0x02
     680:	93 83       	std	Z+3, r25	; 0x03
	}
	return ret;

}
     682:	8f 2d       	mov	r24, r15
     684:	29 96       	adiw	r28, 0x09	; 9
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	08 95       	ret

0000069e <DS18X20_format_from_maxres>:

uint8_t DS18X20_format_from_maxres( int32_t temperaturevalue, char str[], uint8_t n)
{
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	6a 97       	sbiw	r28, 0x1a	; 26
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	8a 01       	movw	r16, r20
	uint8_t str_loc = 0;
	ldiv_t ldt;
	uint8_t ret;

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {
     6be:	2a 30       	cpi	r18, 0x0A	; 10
     6c0:	08 f4       	brcc	.+2      	; 0x6c4 <DS18X20_format_from_maxres+0x26>
     6c2:	93 c0       	rjmp	.+294    	; 0x7ea <DS18X20_format_from_maxres+0x14c>
     6c4:	61 3c       	cpi	r22, 0xC1	; 193
     6c6:	2d eb       	ldi	r18, 0xBD	; 189
     6c8:	72 07       	cpc	r23, r18
     6ca:	20 ef       	ldi	r18, 0xF0	; 240
     6cc:	82 07       	cpc	r24, r18
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	92 07       	cpc	r25, r18
     6d2:	0c f4       	brge	.+2      	; 0x6d6 <DS18X20_format_from_maxres+0x38>
     6d4:	8c c0       	rjmp	.+280    	; 0x7ee <DS18X20_format_from_maxres+0x150>
     6d6:	60 38       	cpi	r22, 0x80	; 128
     6d8:	26 e9       	ldi	r18, 0x96	; 150
     6da:	72 07       	cpc	r23, r18
     6dc:	28 e9       	ldi	r18, 0x98	; 152
     6de:	82 07       	cpc	r24, r18
     6e0:	91 05       	cpc	r25, r1
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <DS18X20_format_from_maxres+0x48>
     6e4:	86 c0       	rjmp	.+268    	; 0x7f2 <DS18X20_format_from_maxres+0x154>

		if ( temperaturevalue < 0) {
     6e6:	99 23       	and	r25, r25
     6e8:	54 f4       	brge	.+20     	; 0x6fe <DS18X20_format_from_maxres+0x60>
			sign = 1;
			temperaturevalue = -temperaturevalue;
     6ea:	90 95       	com	r25
     6ec:	80 95       	com	r24
     6ee:	70 95       	com	r23
     6f0:	61 95       	neg	r22
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	8f 4f       	sbci	r24, 0xFF	; 255
     6f6:	9f 4f       	sbci	r25, 0xFF	; 255

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {

		if ( temperaturevalue < 0) {
			sign = 1;
     6f8:	ee 24       	eor	r14, r14
     6fa:	e3 94       	inc	r14
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <DS18X20_format_from_maxres+0x62>

}

uint8_t DS18X20_format_from_maxres( int32_t temperaturevalue, char str[], uint8_t n)
{
	uint8_t sign = 0;
     6fe:	e1 2c       	mov	r14, r1

	// range from -550000:-55.0000�C to 1250000:+125.0000�C -> min. 9+1 chars
	if ( n >= (9+1) && temperaturevalue > -1000000L && temperaturevalue < 10000000L ) {

		if ( temperaturevalue < 0) {
			sign = 1;
     700:	f1 2c       	mov	r15, r1
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
     702:	68 94       	set
     704:	dd 24       	eor	r13, r13
     706:	d3 f8       	bld	r13, 3
     708:	01 c0       	rjmp	.+2      	; 0x70c <DS18X20_format_from_maxres+0x6e>
			temp[temp_loc++] = ldt.rem + '0';
     70a:	f2 2e       	mov	r15, r18
			sign = 1;
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
     70c:	2a e0       	ldi	r18, 0x0A	; 10
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	6a d4       	rcall	.+2260   	; 0xfea <__divmodsi4>
     716:	2b 8b       	std	Y+19, r18	; 0x13
     718:	3c 8b       	std	Y+20, r19	; 0x14
     71a:	4d 8b       	std	Y+21, r20	; 0x15
     71c:	5e 8b       	std	Y+22, r21	; 0x16
     71e:	6f 8b       	std	Y+23, r22	; 0x17
     720:	78 8f       	std	Y+24, r23	; 0x18
     722:	89 8f       	std	Y+25, r24	; 0x19
     724:	9a 8f       	std	Y+26, r25	; 0x1a
     726:	fe 01       	movw	r30, r28
     728:	73 96       	adiw	r30, 0x13	; 19
     72a:	de 01       	movw	r26, r28
     72c:	1b 96       	adiw	r26, 0x0b	; 11
     72e:	8d 2d       	mov	r24, r13
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	8a 95       	dec	r24
     736:	e1 f7       	brne	.-8      	; 0x730 <DS18X20_format_from_maxres+0x92>
			temp[temp_loc++] = ldt.rem + '0';
     738:	e1 e0       	ldi	r30, 0x01	; 1
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ec 0f       	add	r30, r28
     73e:	fd 1f       	adc	r31, r29
     740:	ef 0d       	add	r30, r15
     742:	f1 1d       	adc	r31, r1
     744:	f7 fc       	sbrc	r15, 7
     746:	fa 95       	dec	r31
     748:	8f 85       	ldd	r24, Y+15	; 0x0f
     74a:	80 5d       	subi	r24, 0xD0	; 208
     74c:	80 83       	st	Z, r24
     74e:	2f 2d       	mov	r18, r15
     750:	2f 5f       	subi	r18, 0xFF	; 255
			temperaturevalue = ldt.quot;
     752:	6b 85       	ldd	r22, Y+11	; 0x0b
     754:	7c 85       	ldd	r23, Y+12	; 0x0c
     756:	8d 85       	ldd	r24, Y+13	; 0x0d
     758:	9e 85       	ldd	r25, Y+14	; 0x0e
		} while ( temperaturevalue > 0 );
     75a:	16 16       	cp	r1, r22
     75c:	17 06       	cpc	r1, r23
     75e:	18 06       	cpc	r1, r24
     760:	19 06       	cpc	r1, r25
     762:	9c f2       	brlt	.-90     	; 0x70a <DS18X20_format_from_maxres+0x6c>
		
		// mk 20110209
		if ((temp_loc < 4)&&(temp_loc > 1)) {
     764:	82 2f       	mov	r24, r18
     766:	82 50       	subi	r24, 0x02	; 2
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	40 f4       	brcc	.+16     	; 0x77c <DS18X20_format_from_maxres+0xde>
			temp[temp_loc++] = '0';
     76c:	fe 01       	movw	r30, r28
     76e:	e2 0f       	add	r30, r18
     770:	f1 1d       	adc	r31, r1
     772:	27 fd       	sbrc	r18, 7
     774:	fa 95       	dec	r31
     776:	80 e3       	ldi	r24, 0x30	; 48
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	2f 5f       	subi	r18, 0xFF	; 255
		} // mk end

		if ( sign ) {
     77c:	ee 20       	and	r14, r14
     77e:	59 f0       	breq	.+22     	; 0x796 <DS18X20_format_from_maxres+0xf8>
			temp[temp_loc] = '-';
     780:	fe 01       	movw	r30, r28
     782:	e2 0f       	add	r30, r18
     784:	f1 1d       	adc	r31, r1
     786:	27 fd       	sbrc	r18, 7
     788:	fa 95       	dec	r31
     78a:	8d e2       	ldi	r24, 0x2D	; 45
     78c:	81 83       	std	Z+1, r24	; 0x01
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     78e:	22 23       	and	r18, r18
     790:	64 f4       	brge	.+24     	; 0x7aa <DS18X20_format_from_maxres+0x10c>
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	24 c0       	rjmp	.+72     	; 0x7de <DS18X20_format_from_maxres+0x140>
		} // mk end

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
     796:	fe 01       	movw	r30, r28
     798:	e2 0f       	add	r30, r18
     79a:	f1 1d       	adc	r31, r1
     79c:	27 fd       	sbrc	r18, 7
     79e:	fa 95       	dec	r31
     7a0:	8b e2       	ldi	r24, 0x2B	; 43
     7a2:	81 83       	std	Z+1, r24	; 0x01
     7a4:	f4 cf       	rjmp	.-24     	; 0x78e <DS18X20_format_from_maxres+0xf0>
			temperaturevalue = -temperaturevalue;
		}

		do {
			ldt = ldiv( temperaturevalue, 10 );
			temp[temp_loc++] = ldt.rem + '0';
     7a6:	89 2f       	mov	r24, r25
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DS18X20_format_from_maxres+0x110>
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     7aa:	80 e0       	ldi	r24, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 3 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     7ac:	3e e2       	ldi	r19, 0x2E	; 46
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
     7ae:	f8 01       	movw	r30, r16
     7b0:	e8 0f       	add	r30, r24
     7b2:	f1 1d       	adc	r31, r1
     7b4:	a1 e0       	ldi	r26, 0x01	; 1
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	ac 0f       	add	r26, r28
     7ba:	bd 1f       	adc	r27, r29
     7bc:	a2 0f       	add	r26, r18
     7be:	b1 1d       	adc	r27, r1
     7c0:	9c 91       	ld	r25, X
     7c2:	90 83       	st	Z, r25
     7c4:	98 2f       	mov	r25, r24
     7c6:	9f 5f       	subi	r25, 0xFF	; 255
     7c8:	21 50       	subi	r18, 0x01	; 1
			if ( temp_loc == 3 ) {
     7ca:	23 30       	cpi	r18, 0x03	; 3
     7cc:	31 f4       	brne	.+12     	; 0x7da <DS18X20_format_from_maxres+0x13c>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
     7ce:	f8 01       	movw	r30, r16
     7d0:	e9 0f       	add	r30, r25
     7d2:	f1 1d       	adc	r31, r1
     7d4:	30 83       	st	Z, r19
     7d6:	9f 5f       	subi	r25, 0xFF	; 255
     7d8:	e6 cf       	rjmp	.-52     	; 0x7a6 <DS18X20_format_from_maxres+0x108>
			temp[temp_loc] = '-';
		} else {
			temp[temp_loc] = '+';
		}

		while ( temp_loc >= 0 ) {
     7da:	22 23       	and	r18, r18
     7dc:	24 f7       	brge	.-56     	; 0x7a6 <DS18X20_format_from_maxres+0x108>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 3 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
     7de:	f8 01       	movw	r30, r16
     7e0:	e9 0f       	add	r30, r25
     7e2:	f1 1d       	adc	r31, r1
     7e4:	10 82       	st	Z, r1

		ret = DS18X20_OK;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <DS18X20_format_from_maxres+0x156>
	} else {
		ret = DS18X20_ERROR;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <DS18X20_format_from_maxres+0x156>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <DS18X20_format_from_maxres+0x156>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
     7f4:	6a 96       	adiw	r28, 0x1a	; 26
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	08 95       	ret

00000810 <DS18X20_write_scratchpad>:

#if DS18X20_EEPROMSUPPORT

uint8_t DS18X20_write_scratchpad( uint8_t id[], 
	uint8_t th, uint8_t tl, uint8_t conf)
{
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	06 2f       	mov	r16, r22
     81e:	14 2f       	mov	r17, r20
     820:	f2 2e       	mov	r15, r18
	uint8_t ret;

	ow_reset();
     822:	a0 d1       	rcall	.+832    	; 0xb64 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     824:	72 d1       	rcall	.+740    	; 0xb0a <ow_input_pin_state>
     826:	88 23       	and	r24, r24
     828:	81 f0       	breq	.+32     	; 0x84a <DS18X20_write_scratchpad+0x3a>
		ow_command( DS18X20_WRITE_SCRATCHPAD, id );
     82a:	be 01       	movw	r22, r28
     82c:	8e e4       	ldi	r24, 0x4E	; 78
     82e:	5c d2       	rcall	.+1208   	; 0xce8 <ow_command>
		ow_byte_wr( th );
     830:	80 2f       	mov	r24, r16
     832:	b5 d1       	rcall	.+874    	; 0xb9e <ow_byte_wr>
		ow_byte_wr( tl );
     834:	81 2f       	mov	r24, r17
     836:	b3 d1       	rcall	.+870    	; 0xb9e <ow_byte_wr>
		if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE ) {
     838:	88 81       	ld	r24, Y
     83a:	88 32       	cpi	r24, 0x28	; 40
     83c:	11 f0       	breq	.+4      	; 0x842 <DS18X20_write_scratchpad+0x32>
     83e:	82 32       	cpi	r24, 0x22	; 34
     840:	31 f4       	brne	.+12     	; 0x84e <DS18X20_write_scratchpad+0x3e>
			ow_byte_wr( conf ); // config only available on DS18B20 and DS1822
     842:	8f 2d       	mov	r24, r15
     844:	ac d1       	rcall	.+856    	; 0xb9e <ow_byte_wr>
		}
		ret = DS18X20_OK;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	03 c0       	rjmp	.+6      	; 0x850 <DS18X20_write_scratchpad+0x40>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_write_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	01 c0       	rjmp	.+2      	; 0x850 <DS18X20_write_scratchpad+0x40>
		ow_byte_wr( th );
		ow_byte_wr( tl );
		if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE ) {
			ow_byte_wr( conf ); // config only available on DS18B20 and DS1822
		}
		ret = DS18X20_OK;
     84e:	80 e0       	ldi	r24, 0x00	; 0
//		uart_puts_P_verbose( "DS18X20_write_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
	}

	return ret;
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	08 95       	ret

0000085c <DS18X20_read_scratchpad>:

uint8_t DS18X20_read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	ec 01       	movw	r28, r24
     868:	8b 01       	movw	r16, r22
     86a:	f4 2e       	mov	r15, r20
	uint8_t ret;

	ow_reset();
     86c:	7b d1       	rcall	.+758    	; 0xb64 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     86e:	4d d1       	rcall	.+666    	; 0xb0a <ow_input_pin_state>
     870:	88 23       	and	r24, r24
     872:	29 f0       	breq	.+10     	; 0x87e <DS18X20_read_scratchpad+0x22>
		ret = read_scratchpad( id, sp, n );
     874:	4f 2d       	mov	r20, r15
     876:	b8 01       	movw	r22, r16
     878:	ce 01       	movw	r24, r28
     87a:	43 dd       	rcall	.-1402   	; 0x302 <read_scratchpad>
     87c:	01 c0       	rjmp	.+2      	; 0x880 <DS18X20_read_scratchpad+0x24>
	} 
	else {
//		uart_puts_P_verbose( "DS18X20_read_scratchpad: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     87e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	08 95       	ret

0000088c <DS18X20_scratchpad_to_eeprom>:

uint8_t DS18X20_scratchpad_to_eeprom( uint8_t with_power_extern, 
	uint8_t id[] )
{
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	18 2f       	mov	r17, r24
     894:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
     896:	66 d1       	rcall	.+716    	; 0xb64 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     898:	38 d1       	rcall	.+624    	; 0xb0a <ow_input_pin_state>
     89a:	88 23       	and	r24, r24
     89c:	c9 f0       	breq	.+50     	; 0x8d0 <DS18X20_scratchpad_to_eeprom+0x44>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
     89e:	11 30       	cpi	r17, 0x01	; 1
     8a0:	61 f0       	breq	.+24     	; 0x8ba <DS18X20_scratchpad_to_eeprom+0x2e>
			ow_command_with_parasite_enable( DS18X20_COPY_SCRATCHPAD, id );
     8a2:	be 01       	movw	r22, r28
     8a4:	88 e4       	ldi	r24, 0x48	; 72
     8a6:	23 d2       	rcall	.+1094   	; 0xcee <ow_command_with_parasite_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	83 ec       	ldi	r24, 0xC3	; 195
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <DS18X20_scratchpad_to_eeprom+0x20>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <DS18X20_scratchpad_to_eeprom+0x26>
     8b2:	00 00       	nop
		} else {
			ow_command( DS18X20_COPY_SCRATCHPAD, id );
		}
		_delay_ms(DS18X20_COPYSP_DELAY); // wait for 10 ms 
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_parasite_disable();
     8b4:	55 d1       	rcall	.+682    	; 0xb60 <ow_parasite_disable>
		}
		ret = DS18X20_OK;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <DS18X20_scratchpad_to_eeprom+0x46>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_COPY_SCRATCHPAD, id );
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_COPY_SCRATCHPAD, id );
     8ba:	be 01       	movw	r22, r28
     8bc:	88 e4       	ldi	r24, 0x48	; 72
     8be:	14 d2       	rcall	.+1064   	; 0xce8 <ow_command>
     8c0:	83 ec       	ldi	r24, 0xC3	; 195
     8c2:	99 e0       	ldi	r25, 0x09	; 9
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <DS18X20_scratchpad_to_eeprom+0x38>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <DS18X20_scratchpad_to_eeprom+0x3e>
     8ca:	00 00       	nop
		}
		_delay_ms(DS18X20_COPYSP_DELAY); // wait for 10 ms 
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_parasite_disable();
		}
		ret = DS18X20_OK;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <DS18X20_scratchpad_to_eeprom+0x46>
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_copy_scratchpad: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ret;
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	08 95       	ret

000008da <DS18X20_eeprom_to_scratchpad>:

uint8_t DS18X20_eeprom_to_scratchpad( uint8_t id[] )
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
	uint8_t ret;
	uint8_t retry_count=255;

	ow_reset();
     8e0:	41 d1       	rcall	.+642    	; 0xb64 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     8e2:	13 d1       	rcall	.+550    	; 0xb0a <ow_input_pin_state>
     8e4:	88 23       	and	r24, r24
     8e6:	81 f0       	breq	.+32     	; 0x908 <DS18X20_eeprom_to_scratchpad+0x2e>
		ow_command( DS18X20_RECALL_E2, id );
     8e8:	be 01       	movw	r22, r28
     8ea:	88 eb       	ldi	r24, 0xB8	; 184
     8ec:	fd d1       	rcall	.+1018   	; 0xce8 <ow_command>
		while( retry_count-- && !( ow_bit_io( 1 ) ) ) { 
     8ee:	ce ef       	ldi	r28, 0xFE	; 254
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DS18X20_eeprom_to_scratchpad+0x1c>
     8f2:	c1 50       	subi	r28, 0x01	; 1
     8f4:	20 f0       	brcs	.+8      	; 0x8fe <DS18X20_eeprom_to_scratchpad+0x24>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	4e d1       	rcall	.+668    	; 0xb96 <ow_bit_io>
     8fa:	88 23       	and	r24, r24
     8fc:	d1 f3       	breq	.-12     	; 0x8f2 <DS18X20_eeprom_to_scratchpad+0x18>
			;
		}
		if ( retry_count ) {
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	cc 23       	and	r28, r28
     902:	19 f0       	breq	.+6      	; 0x90a <DS18X20_eeprom_to_scratchpad+0x30>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	01 c0       	rjmp	.+2      	; 0x90a <DS18X20_eeprom_to_scratchpad+0x30>
			ret = DS18X20_ERROR;
		}
	} 
	else { 
//		uart_puts_P_verbose( "DS18X20_recall_E2: Short Circuit!\r" );
		ret = DS18X20_ERROR;
     908:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     910:	da 9a       	sbi	0x1b, 2	; 27
    lcd_e_delay();
     912:	00 c0       	rjmp	.+0      	; 0x914 <toggle_e+0x4>
    lcd_e_low();
     914:	da 98       	cbi	0x1b, 2	; 27
     916:	08 95       	ret

00000918 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     918:	cf 93       	push	r28
     91a:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     91c:	66 23       	and	r22, r22
     91e:	11 f0       	breq	.+4      	; 0x924 <lcd_write+0xc>
       lcd_rs_high();
     920:	d8 9a       	sbi	0x1b, 0	; 27
     922:	01 c0       	rjmp	.+2      	; 0x926 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     924:	d8 98       	cbi	0x1b, 0	; 27
    }
    lcd_rw_low();
     926:	d9 98       	cbi	0x1b, 1	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     928:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     92a:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     92c:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     92e:	d7 9a       	sbi	0x1a, 7	; 26
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     930:	df 98       	cbi	0x1b, 7	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     932:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     934:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     936:	dc 98       	cbi	0x1b, 4	; 27
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     938:	cc 23       	and	r28, r28
     93a:	0c f4       	brge	.+2      	; 0x93e <lcd_write+0x26>
     93c:	df 9a       	sbi	0x1b, 7	; 27
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     93e:	c6 fd       	sbrc	r28, 6
     940:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     942:	c5 fd       	sbrc	r28, 5
     944:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     946:	c4 fd       	sbrc	r28, 4
     948:	dc 9a       	sbi	0x1b, 4	; 27
        lcd_e_toggle();
     94a:	e2 df       	rcall	.-60     	; 0x910 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     94c:	df 98       	cbi	0x1b, 7	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     94e:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     950:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     952:	dc 98       	cbi	0x1b, 4	; 27
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     954:	c3 fd       	sbrc	r28, 3
     956:	df 9a       	sbi	0x1b, 7	; 27
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     958:	c2 fd       	sbrc	r28, 2
     95a:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     95c:	c1 fd       	sbrc	r28, 1
     95e:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     960:	c0 fd       	sbrc	r28, 0
     962:	dc 9a       	sbi	0x1b, 4	; 27
        lcd_e_toggle();        
     964:	d5 df       	rcall	.-86     	; 0x910 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     966:	dc 9a       	sbi	0x1b, 4	; 27
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     968:	dd 9a       	sbi	0x1b, 5	; 27
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     96a:	de 9a       	sbi	0x1b, 6	; 27
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     96c:	df 9a       	sbi	0x1b, 7	; 27
    }
}
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     972:	88 23       	and	r24, r24
     974:	11 f0       	breq	.+4      	; 0x97a <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     976:	d8 9a       	sbi	0x1b, 0	; 27
     978:	01 c0       	rjmp	.+2      	; 0x97c <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     97a:	d8 98       	cbi	0x1b, 0	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
     97c:	d9 9a       	sbi	0x1b, 1	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     97e:	d4 98       	cbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     980:	d5 98       	cbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     982:	d6 98       	cbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     984:	d7 98       	cbi	0x1a, 7	; 26
                
        /* read high nibble first */
        lcd_e_high();
     986:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();        
     988:	00 c0       	rjmp	.+0      	; 0x98a <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     98a:	cc 99       	sbic	0x19, 4	; 25
     98c:	02 c0       	rjmp	.+4      	; 0x992 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	01 c0       	rjmp	.+2      	; 0x994 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     992:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     994:	cd 99       	sbic	0x19, 5	; 25
     996:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     998:	ce 99       	sbic	0x19, 6	; 25
     99a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     99c:	cf 99       	sbic	0x19, 7	; 25
     99e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     9a0:	da 98       	cbi	0x1b, 2	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     9a4:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     9a8:	cc 99       	sbic	0x19, 4	; 25
     9aa:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     9ac:	cd 99       	sbic	0x19, 5	; 25
     9ae:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     9b0:	ce 99       	sbic	0x19, 6	; 25
     9b2:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     9b4:	cf 99       	sbic	0x19, 7	; 25
     9b6:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     9b8:	da 98       	cbi	0x1b, 2	; 27
    }
    return data;
}
     9ba:	08 95       	ret

000009bc <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	d9 df       	rcall	.-78     	; 0x972 <lcd_read>
     9c0:	88 23       	and	r24, r24
     9c2:	e4 f3       	brlt	.-8      	; 0x9bc <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	d4 df       	rcall	.-88     	; 0x972 <lcd_read>
    
}/* lcd_waitbusy */
     9ca:	08 95       	ret

000009cc <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     9cc:	cf 93       	push	r28
     9ce:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     9d0:	f5 df       	rcall	.-22     	; 0x9bc <lcd_waitbusy>
    lcd_write(cmd,0);
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	8c 2f       	mov	r24, r28
     9d6:	a0 df       	rcall	.-192    	; 0x918 <lcd_write>
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     9dc:	cf 93       	push	r28
     9de:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     9e0:	ed df       	rcall	.-38     	; 0x9bc <lcd_waitbusy>
    lcd_write(data,1);
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	8c 2f       	mov	r24, r28
     9e6:	98 df       	rcall	.-208    	; 0x918 <lcd_write>
}
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     9ec:	61 11       	cpse	r22, r1
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     9f0:	80 58       	subi	r24, 0x80	; 128
     9f2:	ec df       	rcall	.-40     	; 0x9cc <lcd_command>
     9f4:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     9f6:	80 54       	subi	r24, 0x40	; 64
     9f8:	e9 df       	rcall	.-46     	; 0x9cc <lcd_command>
     9fa:	08 95       	ret

000009fc <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     9fc:	df df       	rcall	.-66     	; 0x9bc <lcd_waitbusy>
}
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	08 95       	ret

00000a02 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	e3 df       	rcall	.-58     	; 0x9cc <lcd_command>
     a06:	08 95       	ret

00000a08 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	e0 df       	rcall	.-64     	; 0x9cc <lcd_command>
     a0c:	08 95       	ret

00000a0e <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     a0e:	cf 93       	push	r28
     a10:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     a12:	d4 df       	rcall	.-88     	; 0x9bc <lcd_waitbusy>
    if (c=='\n')
     a14:	ca 30       	cpi	r28, 0x0A	; 10
     a16:	41 f4       	brne	.+16     	; 0xa28 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	10 f4       	brcc	.+4      	; 0xa20 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
     a20:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     a22:	80 58       	subi	r24, 0x80	; 128
     a24:	d3 df       	rcall	.-90     	; 0x9cc <lcd_command>
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	8c 2f       	mov	r24, r28
     a2c:	75 df       	rcall	.-278    	; 0x918 <lcd_write>
    }

}/* lcd_putc */
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     a36:	ec 01       	movw	r28, r24
     a38:	89 91       	ld	r24, Y+
     a3a:	88 23       	and	r24, r24
     a3c:	21 f0       	breq	.+8      	; 0xa46 <lcd_puts+0x14>
    	lcd_putc(c);
     a3e:	e7 df       	rcall	.-50     	; 0xa0e <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     a40:	89 91       	ld	r24, Y+
     a42:	81 11       	cpse	r24, r1
     a44:	fc cf       	rjmp	.-8      	; 0xa3e <lcd_puts+0xc>
    	lcd_putc(c);
    }

}/* lcd_puts */
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <lcd_put_num>:

/**
 * display number
 */
void lcd_put_num(const uint8_t n)
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	2a 97       	sbiw	r28, 0x0a	; 10
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	itoa(n,buf,10);
     a60:	4a e0       	ldi	r20, 0x0A	; 10
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0f d3       	rcall	.+1566   	; 0x108c <itoa>
	lcd_puts(buf);
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	df df       	rcall	.-66     	; 0xa32 <lcd_puts>
}
     a74:	2a 96       	adiw	r28, 0x0a	; 10
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     a8a:	ec 01       	movw	r28, r24
     a8c:	21 96       	adiw	r28, 0x01	; 1
     a8e:	fc 01       	movw	r30, r24
     a90:	84 91       	lpm	r24, Z+
     a92:	88 23       	and	r24, r24
     a94:	31 f0       	breq	.+12     	; 0xaa2 <lcd_puts_p+0x1c>
        lcd_putc(c);
     a96:	bb df       	rcall	.-138    	; 0xa0e <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     a98:	fe 01       	movw	r30, r28
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	84 91       	lpm	r24, Z+
     a9e:	81 11       	cpse	r24, r1
     aa0:	fa cf       	rjmp	.-12     	; 0xa96 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     ab0:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     ab2:	d1 9a       	sbi	0x1a, 1	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     ab4:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     ab6:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     ab8:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     aba:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     abc:	d7 9a       	sbi	0x1a, 7	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     abe:	e0 ea       	ldi	r30, 0xA0	; 160
     ac0:	ff e0       	ldi	r31, 0x0F	; 15
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     ac6:	dd 9a       	sbi	0x1b, 5	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     ac8:	dc 9a       	sbi	0x1b, 4	; 27
    lcd_e_toggle();
     aca:	22 df       	rcall	.-444    	; 0x910 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     acc:	e0 ee       	ldi	r30, 0xE0	; 224
     ace:	f4 e0       	ldi	r31, 0x04	; 4
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     ad4:	1d df       	rcall	.-454    	; 0x910 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ad6:	c0 e1       	ldi	r28, 0x10	; 16
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
     ada:	fe 01       	movw	r30, r28
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <lcd_init+0x34>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     ae0:	17 df       	rcall	.-466    	; 0x910 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ae2:	fe 01       	movw	r30, r28
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     ae8:	dc 98       	cbi	0x1b, 4	; 27
    lcd_e_toggle();
     aea:	12 df       	rcall	.-476    	; 0x910 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     aec:	21 97       	sbiw	r28, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     af0:	88 e2       	ldi	r24, 0x28	; 40
     af2:	6c df       	rcall	.-296    	; 0x9cc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	6a df       	rcall	.-300    	; 0x9cc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     af8:	84 df       	rcall	.-248    	; 0xa02 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	67 df       	rcall	.-306    	; 0x9cc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     afe:	81 2f       	mov	r24, r17
     b00:	65 df       	rcall	.-310    	; 0x9cc <lcd_command>

}/* lcd_init */
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
     b0a:	80 b3       	in	r24, 0x10	; 16
}
     b0c:	80 78       	andi	r24, 0x80	; 128
     b0e:	08 95       	ret

00000b10 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     b10:	97 9a       	sbi	0x12, 7	; 18
	OW_DIR_OUT();
     b12:	8f 9a       	sbi	0x11, 7	; 17
     b14:	08 95       	ret

00000b16 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b1c:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b1e:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
     b20:	97 98       	cbi	0x12, 7	; 18
#endif
		OW_DIR_OUT();    // drive bus low
     b22:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <ow_bit_io_intern+0x10>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
     b26:	88 23       	and	r24, r24
     b28:	11 f0       	breq	.+4      	; 0xb2e <ow_bit_io_intern+0x18>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
     b2a:	8f 98       	cbi	0x11, 7	; 17
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
     b2c:	97 9a       	sbi	0x12, 7	; 18
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	8a 95       	dec	r24
     b32:	f1 f7       	brne	.-4      	; 0xb30 <ow_bit_io_intern+0x1a>
     b34:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
     b36:	80 b3       	in	r24, 0x10	; 16
			b = 0;  // sample at end of read-timeslot
     b38:	88 0f       	add	r24, r24
     b3a:	88 0b       	sbc	r24, r24
     b3c:	c8 23       	and	r28, r24
     b3e:	8e e0       	ldi	r24, 0x0E	; 14
     b40:	8a 95       	dec	r24
     b42:	f1 f7       	brne	.-4      	; 0xb40 <ow_bit_io_intern+0x2a>
     b44:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     b46:	97 9a       	sbi	0x12, 7	; 18
#endif
		OW_DIR_IN();
     b48:	8f 98       	cbi	0x11, 7	; 17
	
		if ( with_parasite_enable ) {
     b4a:	61 11       	cpse	r22, r1
			ow_parasite_enable();
     b4c:	e1 df       	rcall	.-62     	; 0xb10 <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b4e:	df bf       	out	0x3f, r29	; 63
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	8a 95       	dec	r24
     b54:	f1 f7       	brne	.-4      	; 0xb52 <ow_bit_io_intern+0x3c>
     b56:	00 00       	nop
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
     b58:	8c 2f       	mov	r24, r28
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
     b60:	8f 98       	cbi	0x11, 7	; 17
     b62:	08 95       	ret

00000b64 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     b64:	97 98       	cbi	0x12, 7	; 18
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     b66:	8f 9a       	sbi	0x11, 7	; 17
     b68:	80 ea       	ldi	r24, 0xA0	; 160
     b6a:	8a 95       	dec	r24
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <ow_reset+0x6>
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b6e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b70:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     b72:	8f 98       	cbi	0x11, 7	; 17
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     b74:	97 9a       	sbi	0x12, 7	; 18
     b76:	85 e1       	ldi	r24, 0x15	; 21
     b78:	8a 95       	dec	r24
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <ow_reset+0x14>
     b7c:	00 00       	nop
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     b7e:	80 b3       	in	r24, 0x10	; 16
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b80:	9f bf       	out	0x3f, r25	; 63
     b82:	9a e8       	ldi	r25, 0x8A	; 138
     b84:	9a 95       	dec	r25
     b86:	f1 f7       	brne	.-4      	; 0xb84 <ow_reset+0x20>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <ow_reset+0x26>
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     b8a:	87 9b       	sbis	0x10, 7	; 16
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <ow_reset+0x2e>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     b8e:	80 78       	andi	r24, 0x80	; 128
     b90:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     b92:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
     b94:	08 95       	ret

00000b96 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	81 70       	andi	r24, 0x01	; 1
     b9a:	bd df       	rcall	.-134    	; 0xb16 <ow_bit_io_intern>
}
     b9c:	08 95       	ret

00000b9e <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	c8 2f       	mov	r28, r24
     ba4:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     ba6:	8c 2f       	mov	r24, r28
     ba8:	81 70       	andi	r24, 0x01	; 1
     baa:	f5 df       	rcall	.-22     	; 0xb96 <ow_bit_io>
		b >>= 1;
     bac:	c6 95       	lsr	r28
		if( j ) {
     bae:	81 11       	cpse	r24, r1
			b |= 0x80;
     bb0:	c0 68       	ori	r28, 0x80	; 128
     bb2:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     bb4:	c1 f7       	brne	.-16     	; 0xba6 <ow_byte_wr+0x8>
	
	return b;
}
     bb6:	8c 2f       	mov	r24, r28
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     bc4:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     bc6:	d1 30       	cpi	r29, 0x01	; 1
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <ow_byte_wr_with_parasite_enable+0x16>
			j = ow_bit_io_intern( b & 1, 0 );
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	8c 2f       	mov	r24, r28
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	a2 df       	rcall	.-188    	; 0xb16 <ow_bit_io_intern>
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <ow_byte_wr_with_parasite_enable+0x1e>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	8c 2f       	mov	r24, r28
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	9d df       	rcall	.-198    	; 0xb16 <ow_bit_io_intern>
		}
		b >>= 1;
     bdc:	c6 95       	lsr	r28
		if( j ) {
     bde:	81 11       	cpse	r24, r1
			b |= 0x80;
     be0:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     be2:	d1 50       	subi	r29, 0x01	; 1
     be4:	81 f7       	brne	.-32     	; 0xbc6 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     be6:	8c 2f       	mov	r24, r28
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	e8 2e       	mov	r14, r24
     bfc:	eb 01       	movw	r28, r22
     bfe:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     c00:	b1 df       	rcall	.-158    	; 0xb64 <ow_reset>

	if( id ) {
     c02:	20 97       	sbiw	r28, 0x00	; 0
     c04:	59 f0       	breq	.+22     	; 0xc1c <ow_command_intern+0x2e>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     c06:	85 e5       	ldi	r24, 0x55	; 85
     c08:	ca df       	rcall	.-108    	; 0xb9e <ow_byte_wr>
	
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
     c0a:	8e 01       	movw	r16, r28
     c0c:	08 5f       	subi	r16, 0xF8	; 248
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255

	if( id ) {
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     c10:	89 91       	ld	r24, Y+
     c12:	c5 df       	rcall	.-118    	; 0xb9e <ow_byte_wr>
			id++;
		} while( --i );
     c14:	c0 17       	cp	r28, r16
     c16:	d1 07       	cpc	r29, r17
     c18:	d9 f7       	brne	.-10     	; 0xc10 <ow_command_intern+0x22>
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <ow_command_intern+0x32>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     c1c:	8c ec       	ldi	r24, 0xCC	; 204
     c1e:	bf df       	rcall	.-130    	; 0xb9e <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     c20:	ff 20       	and	r15, r15
     c22:	19 f0       	breq	.+6      	; 0xc2a <ow_command_intern+0x3c>
		ow_byte_wr_with_parasite_enable( command );
     c24:	8e 2d       	mov	r24, r14
     c26:	cb df       	rcall	.-106    	; 0xbbe <ow_byte_wr_with_parasite_enable>
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <ow_command_intern+0x40>
	} else {
		ow_byte_wr( command );
     c2a:	8e 2d       	mov	r24, r14
     c2c:	b8 df       	rcall	.-144    	; 0xb9e <ow_byte_wr>
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	af df       	rcall	.-162    	; 0xb9e <ow_byte_wr>
}
     c40:	08 95       	ret

00000c42 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	d8 2e       	mov	r13, r24
     c52:	eb 01       	movw	r28, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     c54:	87 df       	rcall	.-242    	; 0xb64 <ow_reset>
     c56:	81 11       	cpse	r24, r1
     c58:	24 c0       	rjmp	.+72     	; 0xca2 <ow_rom_search+0x60>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     c5a:	80 ef       	ldi	r24, 0xF0	; 240
     c5c:	a0 df       	rcall	.-192    	; 0xb9e <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     c5e:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     c60:	10 e4       	ldi	r17, 0x40	; 64
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
}


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
     c62:	0f 2e       	mov	r0, r31
     c64:	f8 ef       	ldi	r31, 0xF8	; 248
     c66:	ff 2e       	mov	r15, r31
     c68:	f0 2d       	mov	r31, r0
     c6a:	f1 0e       	add	r15, r17
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	93 df       	rcall	.-218    	; 0xb96 <ow_bit_io>
     c70:	08 2f       	mov	r16, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 df       	rcall	.-224    	; 0xb96 <ow_bit_io>
     c76:	88 23       	and	r24, r24
     c78:	19 f0       	breq	.+6      	; 0xc80 <ow_rom_search+0x3e>
				if( b ) {               // 0b11
     c7a:	00 23       	and	r16, r16
     c7c:	d1 f0       	breq	.+52     	; 0xcb2 <ow_rom_search+0x70>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <ow_rom_search+0x66>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     c80:	01 11       	cpse	r16, r1
     c82:	22 c0       	rjmp	.+68     	; 0xcc8 <ow_rom_search+0x86>
					if( diff > i || ((*id & 1) && diff != i) ) {
     c84:	1d 15       	cp	r17, r13
     c86:	d8 f0       	brcs	.+54     	; 0xcbe <ow_rom_search+0x7c>
     c88:	88 81       	ld	r24, Y
     c8a:	80 ff       	sbrs	r24, 0
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <ow_rom_search+0x70>
     c8e:	d1 12       	cpse	r13, r17
     c90:	19 c0       	rjmp	.+50     	; 0xcc4 <ow_rom_search+0x82>
     c92:	0f c0       	rjmp	.+30     	; 0xcb2 <ow_rom_search+0x70>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     c94:	11 50       	subi	r17, 0x01	; 1
			
		} while( --j );
     c96:	1f 11       	cpse	r17, r15
     c98:	e9 cf       	rjmp	.-46     	; 0xc6c <ow_rom_search+0x2a>
		
		id++;                           // next byte
     c9a:	21 96       	adiw	r28, 0x01	; 1
	
	} while( i );
     c9c:	11 11       	cpse	r17, r1
     c9e:	e1 cf       	rjmp	.-62     	; 0xc62 <ow_rom_search+0x20>
     ca0:	1a c0       	rjmp	.+52     	; 0xcd6 <ow_rom_search+0x94>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     ca2:	ee 24       	eor	r14, r14
     ca4:	ea 94       	dec	r14
     ca6:	17 c0       	rjmp	.+46     	; 0xcd6 <ow_rom_search+0x94>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     ca8:	0f 2e       	mov	r0, r31
     caa:	fe ef       	ldi	r31, 0xFE	; 254
     cac:	ef 2e       	mov	r14, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <ow_rom_search+0x94>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     cb2:	80 2f       	mov	r24, r16
     cb4:	70 df       	rcall	.-288    	; 0xb96 <ow_bit_io>
			*id >>= 1;
     cb6:	98 81       	ld	r25, Y
     cb8:	96 95       	lsr	r25
     cba:	98 83       	st	Y, r25
     cbc:	eb cf       	rjmp	.-42     	; 0xc94 <ow_rom_search+0x52>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     cbe:	e1 2e       	mov	r14, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     cc0:	01 e0       	ldi	r16, 0x01	; 1
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <ow_rom_search+0x86>
						next_diff = i;  // next pass 0
     cc4:	e1 2e       	mov	r14, r17
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     cc6:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     cc8:	80 2f       	mov	r24, r16
     cca:	65 df       	rcall	.-310    	; 0xb96 <ow_bit_io>
			*id >>= 1;
     ccc:	98 81       	ld	r25, Y
     cce:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     cd0:	90 68       	ori	r25, 0x80	; 128
     cd2:	98 83       	st	Y, r25
     cd4:	df cf       	rjmp	.-66     	; 0xc94 <ow_rom_search+0x52>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     cd6:	8e 2d       	mov	r24, r14
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	81 df       	rcall	.-254    	; 0xbee <ow_command_intern>
     cec:	08 95       	ret

00000cee <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	7e df       	rcall	.-260    	; 0xbee <ow_command_intern>
     cf2:	08 95       	ret

00000cf4 <__vector_4>:

volatile uint8_t sec;
volatile uint8_t min;

ISR(TIMER1_COMPA_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	8f 93       	push	r24
	//count seconds and store minutes
	sec++;
     d00:	80 91 c2 00 	lds	r24, 0x00C2
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	80 93 c2 00 	sts	0x00C2, r24
	if( sec > 59 )
     d0a:	80 91 c2 00 	lds	r24, 0x00C2
     d0e:	8c 33       	cpi	r24, 0x3C	; 60
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__vector_4+0x2c>
	{
		min++;
     d12:	80 91 c1 00 	lds	r24, 0x00C1
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	80 93 c1 00 	sts	0x00C1, r24
		sec = 0;
     d1c:	10 92 c2 00 	sts	0x00C2, r1
	}
}
     d20:	8f 91       	pop	r24
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <waitForOk>:

void waitForOk()
{
	while( (PIND & _BV(OK)) == 0);
     d2c:	80 9b       	sbis	0x10, 0	; 16
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <waitForOk>
}
     d30:	08 95       	ret

00000d32 <setMashTimeLoop>:

void setMashTimeLoop()
{
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d36:	8f e4       	ldi	r24, 0x4F	; 79
     d38:	93 ec       	ldi	r25, 0xC3	; 195
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <setMashTimeLoop+0x8>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <setMashTimeLoop+0xe>
     d40:	00 00       	nop
	uint8_t input = 0;

	while( !done )
	{
		_delay_ms(200);
		lcd_gotoxy(5,1);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	52 de       	rcall	.-860    	; 0x9ec <lcd_gotoxy>
		lcd_put_num(mashTime);
     d48:	80 91 63 00 	lds	r24, 0x0063
     d4c:	7f de       	rcall	.-770    	; 0xa4c <lcd_put_num>
		lcd_puts("    ");
     d4e:	86 eb       	ldi	r24, 0xB6	; 182
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	6f de       	rcall	.-802    	; 0xa32 <lcd_puts>
}

void setMashTimeLoop()
{
	uint8_t done = 0;
	uint8_t input = 0;
     d54:	c0 e0       	ldi	r28, 0x00	; 0
			done = 1;
		}
		if(mashTime < 0)
			mashTime = 0;
		if(mashTime > 180)
			mashTime = 180;
     d56:	d4 eb       	ldi	r29, 0xB4	; 180
     d58:	16 c0       	rjmp	.+44     	; 0xd86 <setMashTimeLoop+0x54>
     d5a:	8f e4       	ldi	r24, 0x4F	; 79
     d5c:	93 ec       	ldi	r25, 0xC3	; 195
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <setMashTimeLoop+0x2c>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <setMashTimeLoop+0x32>
     d64:	00 00       	nop
	uint8_t input = 0;

	while( !done )
	{
		_delay_ms(200);
		lcd_gotoxy(5,1);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	40 de       	rcall	.-896    	; 0x9ec <lcd_gotoxy>
		lcd_put_num(mashTime);
     d6c:	80 91 63 00 	lds	r24, 0x0063
     d70:	6d de       	rcall	.-806    	; 0xa4c <lcd_put_num>
		lcd_puts("    ");
     d72:	86 eb       	ldi	r24, 0xB6	; 182
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	5d de       	rcall	.-838    	; 0xa32 <lcd_puts>
		if(input & _BV(UP))
     d78:	c1 ff       	sbrs	r28, 1
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <setMashTimeLoop+0x54>
		{
			mashTime += 10;
     d7c:	80 91 63 00 	lds	r24, 0x0063
     d80:	86 5f       	subi	r24, 0xF6	; 246
     d82:	80 93 63 00 	sts	0x0063, r24
		}
		if(input & _BV(DOWN))
     d86:	c2 ff       	sbrs	r28, 2
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <setMashTimeLoop+0x62>
		{
			mashTime -= 10;
     d8a:	80 91 63 00 	lds	r24, 0x0063
     d8e:	8a 50       	subi	r24, 0x0A	; 10
     d90:	80 93 63 00 	sts	0x0063, r24
		}
		if(input & _BV(OK))
     d94:	8c 2f       	mov	r24, r28
     d96:	81 70       	andi	r24, 0x01	; 1
		{
			done = 1;
		}
		if(mashTime < 0)
			mashTime = 0;
		if(mashTime > 180)
     d98:	90 91 63 00 	lds	r25, 0x0063
     d9c:	95 3b       	cpi	r25, 0xB5	; 181
     d9e:	10 f0       	brcs	.+4      	; 0xda4 <setMashTimeLoop+0x72>
			mashTime = 180;
     da0:	d0 93 63 00 	sts	0x0063, r29
		input = PIND;
     da4:	c0 b3       	in	r28, 0x10	; 16
void setMashTimeLoop()
{
	uint8_t done = 0;
	uint8_t input = 0;

	while( !done )
     da6:	88 23       	and	r24, r24
     da8:	c1 f2       	breq	.-80     	; 0xd5a <setMashTimeLoop+0x28>
		if(mashTime > 180)
			mashTime = 180;
		input = PIND;

	}
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <setMashTempLoop>:


void setMashTempLoop()
{
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	8f e4       	ldi	r24, 0x4F	; 79
     db8:	93 ec       	ldi	r25, 0xC3	; 195
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <setMashTempLoop+0xa>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <setMashTempLoop+0x10>
     dc0:	00 00       	nop
	uint8_t input = 0;

	while( !done )
	{
		_delay_ms(200);
		lcd_gotoxy(0,1);
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	12 de       	rcall	.-988    	; 0x9ec <lcd_gotoxy>
		lcd_put_num(mashTemp);
     dc8:	80 91 62 00 	lds	r24, 0x0062
     dcc:	3f de       	rcall	.-898    	; 0xa4c <lcd_put_num>
		lcd_putc('(');
     dce:	88 e2       	ldi	r24, 0x28	; 40
     dd0:	1e de       	rcall	.-964    	; 0xa0e <lcd_putc>
		lcd_put_num(initialMashTemp);
     dd2:	80 91 61 00 	lds	r24, 0x0061
     dd6:	3a de       	rcall	.-908    	; 0xa4c <lcd_put_num>
		lcd_putc(')');
     dd8:	89 e2       	ldi	r24, 0x29	; 41
     dda:	19 de       	rcall	.-974    	; 0xa0e <lcd_putc>


void setMashTempLoop()
{
	uint8_t done = 0;
	uint8_t input = 0;
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
			done = 1;
		}
		if(mashTemp < 51)
			mashTemp = 50;
		if(mashTemp >= 99)
			mashTemp = 99;
     dde:	13 e6       	ldi	r17, 0x63	; 99
		if(input & _BV(OK))
		{
			done = 1;
		}
		if(mashTemp < 51)
			mashTemp = 50;
     de0:	d2 e3       	ldi	r29, 0x32	; 50
     de2:	1a c0       	rjmp	.+52     	; 0xe18 <setMashTempLoop+0x68>
     de4:	8f e4       	ldi	r24, 0x4F	; 79
     de6:	93 ec       	ldi	r25, 0xC3	; 195
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <setMashTempLoop+0x38>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <setMashTempLoop+0x3e>
     dee:	00 00       	nop
	uint8_t input = 0;

	while( !done )
	{
		_delay_ms(200);
		lcd_gotoxy(0,1);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	fb dd       	rcall	.-1034   	; 0x9ec <lcd_gotoxy>
		lcd_put_num(mashTemp);
     df6:	80 91 62 00 	lds	r24, 0x0062
     dfa:	28 de       	rcall	.-944    	; 0xa4c <lcd_put_num>
		lcd_putc('(');
     dfc:	88 e2       	ldi	r24, 0x28	; 40
     dfe:	07 de       	rcall	.-1010   	; 0xa0e <lcd_putc>
		lcd_put_num(initialMashTemp);
     e00:	80 91 61 00 	lds	r24, 0x0061
     e04:	23 de       	rcall	.-954    	; 0xa4c <lcd_put_num>
		lcd_putc(')');
     e06:	89 e2       	ldi	r24, 0x29	; 41
     e08:	02 de       	rcall	.-1020   	; 0xa0e <lcd_putc>
		if(input & _BV(UP))
     e0a:	c1 ff       	sbrs	r28, 1
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <setMashTempLoop+0x68>
		{
			mashTemp += 1;
     e0e:	80 91 62 00 	lds	r24, 0x0062
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 93 62 00 	sts	0x0062, r24
		}
		if(input & _BV(DOWN))
     e18:	c2 ff       	sbrs	r28, 2
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <setMashTempLoop+0x76>
		{
			mashTemp -= 1;
     e1c:	80 91 62 00 	lds	r24, 0x0062
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	80 93 62 00 	sts	0x0062, r24
		}
		if(input & _BV(OK))
     e26:	9c 2f       	mov	r25, r28
     e28:	91 70       	andi	r25, 0x01	; 1
		{
			done = 1;
		}
		if(mashTemp < 51)
     e2a:	80 91 62 00 	lds	r24, 0x0062
     e2e:	83 33       	cpi	r24, 0x33	; 51
     e30:	18 f4       	brcc	.+6      	; 0xe38 <setMashTempLoop+0x88>
			mashTemp = 50;
     e32:	d0 93 62 00 	sts	0x0062, r29
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <setMashTempLoop+0x90>
		if(mashTemp >= 99)
     e38:	83 36       	cpi	r24, 0x63	; 99
     e3a:	10 f0       	brcs	.+4      	; 0xe40 <setMashTempLoop+0x90>
			mashTemp = 99;
     e3c:	10 93 62 00 	sts	0x0062, r17

		initialMashTemp = mashTemp+3;
     e40:	80 91 62 00 	lds	r24, 0x0062
     e44:	8d 5f       	subi	r24, 0xFD	; 253
     e46:	80 93 61 00 	sts	0x0061, r24
		input = PIND;
     e4a:	c0 b3       	in	r28, 0x10	; 16
void setMashTempLoop()
{
	uint8_t done = 0;
	uint8_t input = 0;

	while( !done )
     e4c:	99 23       	and	r25, r25
     e4e:	51 f2       	breq	.-108    	; 0xde4 <setMashTempLoop+0x34>

		initialMashTemp = mashTemp+3;
		input = PIND;

	}
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <main>:

	return nSensors;
}

int main(void)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	65 97       	sbiw	r28, 0x15	; 21
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
	state = STATE_STARTUP;
     e6c:	10 92 c0 00 	sts	0x00C0, r1
	sec = 0;
     e70:	10 92 c2 00 	sts	0x00C2, r1
	min = 0;
     e74:	10 92 c1 00 	sts	0x00C1, r1
	//setup PORTD as half input half output
	DDRD = 0xF;
     e78:	8f e0       	ldi	r24, 0x0F	; 15
     e7a:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~_BV(MASH_HEAT);
     e7c:	94 98       	cbi	0x12, 4	; 18

	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
     e7e:	8e b5       	in	r24, 0x2e	; 46
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8e bd       	out	0x2e, r24	; 46

	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
     e84:	89 b7       	in	r24, 0x39	; 57
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	89 bf       	out	0x39, r24	; 57

	sei();
     e8a:	78 94       	sei

	OCR1A   = 15624; // Set CTC compare value to 1Hz at 1MHz AVR clock, with a prescaler of 64
     e8c:	88 e0       	ldi	r24, 0x08	; 8
     e8e:	9d e3       	ldi	r25, 0x3D	; 61
     e90:	9b bd       	out	0x2b, r25	; 43
     e92:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
     e94:	8e b5       	in	r24, 0x2e	; 46
     e96:	83 60       	ori	r24, 0x03	; 3
     e98:	8e bd       	out	0x2e, r24	; 46

	lcd_init(LCD_DISP_ON);
     e9a:	8c e0       	ldi	r24, 0x0C	; 12
     e9c:	05 de       	rcall	.-1014   	; 0xaa8 <lcd_init>
{
	uint8_t i;
	uint8_t id[OW_ROMCODE_SIZE];
	uint8_t diff, nSensors;

	ow_reset();
     e9e:	62 de       	rcall	.-828    	; 0xb64 <ow_reset>

	nSensors = 0;

	diff = OW_SEARCH_FIRST;
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	8d 8b       	std	Y+21, r24	; 0x15
     ea4:	00 e0       	ldi	r16, 0x00	; 0
     ea6:	10 e0       	ldi	r17, 0x00	; 0
	while ( diff != OW_LAST_DEVICE && nSensors < MAXSENSORS ) {
		DS18X20_find_sensor( &diff, &id[0] );
     ea8:	7e 01       	movw	r14, r28
     eaa:	25 e1       	ldi	r18, 0x15	; 21
     eac:	e2 0e       	add	r14, r18
     eae:	f1 1c       	adc	r15, r1
     eb0:	d0 2e       	mov	r13, r16
     eb2:	be 01       	movw	r22, r28
     eb4:	63 5f       	subi	r22, 0xF3	; 243
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	c7 01       	movw	r24, r14
     eba:	51 da       	rcall	.-2910   	; 0x35e <DS18X20_find_sensor>

		if( diff == OW_PRESENCE_ERR ) {
     ebc:	8d 89       	ldd	r24, Y+21	; 0x15
     ebe:	8f 3f       	cpi	r24, 0xFF	; 255
     ec0:	21 f4       	brne	.+8      	; 0xeca <main+0x72>
			lcd_puts("No Sensor found");
     ec2:	87 e7       	ldi	r24, 0x77	; 119
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	b5 dd       	rcall	.-1174   	; 0xa32 <lcd_puts>
     ec8:	1f c0       	rjmp	.+62     	; 0xf08 <main+0xb0>
			break;
		}

		if( diff == OW_DATA_ERR ) {
     eca:	8e 3f       	cpi	r24, 0xFE	; 254
     ecc:	21 f4       	brne	.+8      	; 0xed6 <main+0x7e>
			lcd_puts( "Bus Error");
     ece:	87 e8       	ldi	r24, 0x87	; 135
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	af dd       	rcall	.-1186   	; 0xa32 <lcd_puts>
     ed4:	19 c0       	rjmp	.+50     	; 0xf08 <main+0xb0>
     ed6:	fe 01       	movw	r30, r28
     ed8:	3d 96       	adiw	r30, 0x0d	; 13
	}

	return nSensors;
}

int main(void)
     eda:	d8 01       	movw	r26, r16
     edc:	aa 0f       	add	r26, r26
     ede:	bb 1f       	adc	r27, r27
     ee0:	aa 0f       	add	r26, r26
     ee2:	bb 1f       	adc	r27, r27
     ee4:	aa 0f       	add	r26, r26
     ee6:	bb 1f       	adc	r27, r27
     ee8:	ad 53       	subi	r26, 0x3D	; 61
     eea:	bf 4f       	sbci	r27, 0xFF	; 255
			lcd_puts( "Bus Error");
			break;
		}

		for ( i=0; i < OW_ROMCODE_SIZE; i++ )
			gSensorIDs[nSensors][i] = id[i];
     eec:	81 91       	ld	r24, Z+
     eee:	8d 93       	st	X+, r24
		if( diff == OW_DATA_ERR ) {
			lcd_puts( "Bus Error");
			break;
		}

		for ( i=0; i < OW_ROMCODE_SIZE; i++ )
     ef0:	ee 15       	cp	r30, r14
     ef2:	ff 05       	cpc	r31, r15
     ef4:	d9 f7       	brne	.-10     	; 0xeec <main+0x94>
	}

	return nSensors;
}

int main(void)
     ef6:	d3 94       	inc	r13
	ow_reset();

	nSensors = 0;

	diff = OW_SEARCH_FIRST;
	while ( diff != OW_LAST_DEVICE && nSensors < MAXSENSORS ) {
     ef8:	8d 89       	ldd	r24, Y+21	; 0x15
     efa:	88 23       	and	r24, r24
     efc:	29 f0       	breq	.+10     	; 0xf08 <main+0xb0>
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	05 30       	cpi	r16, 0x05	; 5
     f04:	11 05       	cpc	r17, r1
     f06:	a1 f6       	brne	.-88     	; 0xeb0 <main+0x58>
#ifndef OW_ONE_BUS
	ow_set_bus(&PIND,&PORTD,&DDRD,PD6);
#endif

	nSensors = search_sensors();
	lcd_put_num(nSensors);
     f08:	8d 2d       	mov	r24, r13
     f0a:	a0 dd       	rcall	.-1216   	; 0xa4c <lcd_put_num>
	lcd_puts(" tmp");
     f0c:	81 e9       	ldi	r24, 0x91	; 145
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	90 dd       	rcall	.-1248   	; 0xa32 <lcd_puts>

	lcd_gotoxy(0,1);
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	6a dd       	rcall	.-1324   	; 0x9ec <lcd_gotoxy>
	if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
     f18:	83 ec       	ldi	r24, 0xC3	; 195
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	41 da       	rcall	.-2942   	; 0x3a0 <DS18X20_get_power_status>
     f1e:	81 11       	cpse	r24, r1
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <main+0xd2>
		lcd_puts("parasite");
     f22:	86 e9       	ldi	r24, 0x96	; 150
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	85 dd       	rcall	.-1270   	; 0xa32 <lcd_puts>
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <main+0xd8>
	}
	else
	{
		lcd_puts("externally");
     f2a:	8f e9       	ldi	r24, 0x9F	; 159
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	81 dd       	rcall	.-1278   	; 0xa32 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f30:	81 e2       	ldi	r24, 0x21	; 33
     f32:	8a 95       	dec	r24
     f34:	f1 f7       	brne	.-4      	; 0xf32 <main+0xda>
     f36:	00 00       	nop
		_delay_us(10000);
//		lcd_gotoxy(0,1);
		if(DS18X20_start_meas( DS18X20_POWER_EXTERN, NULL ) == DS18X20_OK )
		{
			_delay_ms( DS18B20_TCONV_12BIT );
			i = gSensorIDs[0][0];
     f38:	03 ec       	ldi	r16, 0xC3	; 195
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	e3 ec       	ldi	r30, 0xC3	; 195
     f3e:	f9 e0       	ldi	r31, 0x09	; 9
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <main+0xe8>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <main+0xee>
     f46:	00 00       	nop
//	ds12887_init();
	while(1)
	{
		_delay_us(10000);
//		lcd_gotoxy(0,1);
		if(DS18X20_start_meas( DS18X20_POWER_EXTERN, NULL ) == DS18X20_OK )
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	3a da       	rcall	.-2956   	; 0x3c4 <DS18X20_start_meas>
     f50:	81 11       	cpse	r24, r1
     f52:	25 c0       	rjmp	.+74     	; 0xf9e <main+0x146>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f54:	ff ee       	ldi	r31, 0xEF	; 239
     f56:	29 e4       	ldi	r18, 0x49	; 73
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	f1 50       	subi	r31, 0x01	; 1
     f5c:	20 40       	sbci	r18, 0x00	; 0
     f5e:	80 40       	sbci	r24, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <main+0x102>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <main+0x10c>
     f64:	00 00       	nop
		{
			_delay_ms( DS18B20_TCONV_12BIT );
			i = gSensorIDs[0][0];
			DS18X20_read_decicelsius_single( i, &decicelsius );
     f66:	be 01       	movw	r22, r28
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 81       	ld	r24, Z
     f70:	ff da       	rcall	.-2562   	; 0x570 <DS18X20_read_decicelsius_single>
			lcd_gotoxy(0,0);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	3a dd       	rcall	.-1420   	; 0x9ec <lcd_gotoxy>
			lcd_puts("temp: ");
     f78:	8a ea       	ldi	r24, 0xAA	; 170
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	5a dd       	rcall	.-1356   	; 0xa32 <lcd_puts>
			DS18X20_format_from_decicelsius(decicelsius,buf, 10);
     f7e:	4a e0       	ldi	r20, 0x0A	; 10
     f80:	be 01       	movw	r22, r28
     f82:	6d 5f       	subi	r22, 0xFD	; 253
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	3d da       	rcall	.-2950   	; 0x406 <DS18X20_format_from_decicelsius>
			lcd_gotoxy(0,1);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	2d dd       	rcall	.-1446   	; 0x9ec <lcd_gotoxy>
			lcd_put_num(decicelsius);
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	5b dd       	rcall	.-1354   	; 0xa4c <lcd_put_num>
			lcd_puts("         ");
     f96:	81 eb       	ldi	r24, 0xB1	; 177
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	4b dd       	rcall	.-1386   	; 0xa32 <lcd_puts>
     f9c:	cf cf       	rjmp	.-98     	; 0xf3c <main+0xe4>
		}
		else
		{
			lcd_gotoxy(0,1);
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	24 dd       	rcall	.-1464   	; 0x9ec <lcd_gotoxy>
			lcd_puts("err");
     fa4:	8b eb       	ldi	r24, 0xBB	; 187
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	44 dd       	rcall	.-1400   	; 0xa32 <lcd_puts>
     faa:	c8 cf       	rjmp	.-112    	; 0xf3c <main+0xe4>

00000fac <__umulhisi3>:
     fac:	a2 9f       	mul	r26, r18
     fae:	b0 01       	movw	r22, r0
     fb0:	b3 9f       	mul	r27, r19
     fb2:	c0 01       	movw	r24, r0
     fb4:	a3 9f       	mul	r26, r19
     fb6:	01 d0       	rcall	.+2      	; 0xfba <__umulhisi3+0xe>
     fb8:	b2 9f       	mul	r27, r18
     fba:	70 0d       	add	r23, r0
     fbc:	81 1d       	adc	r24, r1
     fbe:	11 24       	eor	r1, r1
     fc0:	91 1d       	adc	r25, r1
     fc2:	08 95       	ret

00000fc4 <__divmodhi4>:
     fc4:	97 fb       	bst	r25, 7
     fc6:	07 2e       	mov	r0, r23
     fc8:	16 f4       	brtc	.+4      	; 0xfce <__divmodhi4+0xa>
     fca:	00 94       	com	r0
     fcc:	06 d0       	rcall	.+12     	; 0xfda <__divmodhi4_neg1>
     fce:	77 fd       	sbrc	r23, 7
     fd0:	08 d0       	rcall	.+16     	; 0xfe2 <__divmodhi4_neg2>
     fd2:	26 d0       	rcall	.+76     	; 0x1020 <__udivmodhi4>
     fd4:	07 fc       	sbrc	r0, 7
     fd6:	05 d0       	rcall	.+10     	; 0xfe2 <__divmodhi4_neg2>
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__divmodhi4_exit>

00000fda <__divmodhi4_neg1>:
     fda:	90 95       	com	r25
     fdc:	81 95       	neg	r24
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	08 95       	ret

00000fe2 <__divmodhi4_neg2>:
     fe2:	70 95       	com	r23
     fe4:	61 95       	neg	r22
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe8 <__divmodhi4_exit>:
     fe8:	08 95       	ret

00000fea <__divmodsi4>:
     fea:	05 2e       	mov	r0, r21
     fec:	97 fb       	bst	r25, 7
     fee:	16 f4       	brtc	.+4      	; 0xff4 <__divmodsi4+0xa>
     ff0:	00 94       	com	r0
     ff2:	06 d0       	rcall	.+12     	; 0x1000 <__divmodsi4_neg1>
     ff4:	57 fd       	sbrc	r21, 7
     ff6:	0c d0       	rcall	.+24     	; 0x1010 <__divmodsi4_neg2>
     ff8:	27 d0       	rcall	.+78     	; 0x1048 <__udivmodsi4>
     ffa:	07 fc       	sbrc	r0, 7
     ffc:	09 d0       	rcall	.+18     	; 0x1010 <__divmodsi4_neg2>
     ffe:	7e f4       	brtc	.+30     	; 0x101e <__divmodsi4_exit>

00001000 <__divmodsi4_neg1>:
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__divmodsi4_neg2>:
    1010:	50 95       	com	r21
    1012:	40 95       	com	r20
    1014:	30 95       	com	r19
    1016:	21 95       	neg	r18
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	4f 4f       	sbci	r20, 0xFF	; 255
    101c:	5f 4f       	sbci	r21, 0xFF	; 255

0000101e <__divmodsi4_exit>:
    101e:	08 95       	ret

00001020 <__udivmodhi4>:
    1020:	aa 1b       	sub	r26, r26
    1022:	bb 1b       	sub	r27, r27
    1024:	51 e1       	ldi	r21, 0x11	; 17
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <__udivmodhi4_ep>

00001028 <__udivmodhi4_loop>:
    1028:	aa 1f       	adc	r26, r26
    102a:	bb 1f       	adc	r27, r27
    102c:	a6 17       	cp	r26, r22
    102e:	b7 07       	cpc	r27, r23
    1030:	10 f0       	brcs	.+4      	; 0x1036 <__udivmodhi4_ep>
    1032:	a6 1b       	sub	r26, r22
    1034:	b7 0b       	sbc	r27, r23

00001036 <__udivmodhi4_ep>:
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	5a 95       	dec	r21
    103c:	a9 f7       	brne	.-22     	; 0x1028 <__udivmodhi4_loop>
    103e:	80 95       	com	r24
    1040:	90 95       	com	r25
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	08 95       	ret

00001048 <__udivmodsi4>:
    1048:	a1 e2       	ldi	r26, 0x21	; 33
    104a:	1a 2e       	mov	r1, r26
    104c:	aa 1b       	sub	r26, r26
    104e:	bb 1b       	sub	r27, r27
    1050:	fd 01       	movw	r30, r26
    1052:	0d c0       	rjmp	.+26     	; 0x106e <__udivmodsi4_ep>

00001054 <__udivmodsi4_loop>:
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	ee 1f       	adc	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	a2 17       	cp	r26, r18
    105e:	b3 07       	cpc	r27, r19
    1060:	e4 07       	cpc	r30, r20
    1062:	f5 07       	cpc	r31, r21
    1064:	20 f0       	brcs	.+8      	; 0x106e <__udivmodsi4_ep>
    1066:	a2 1b       	sub	r26, r18
    1068:	b3 0b       	sbc	r27, r19
    106a:	e4 0b       	sbc	r30, r20
    106c:	f5 0b       	sbc	r31, r21

0000106e <__udivmodsi4_ep>:
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	1a 94       	dec	r1
    1078:	69 f7       	brne	.-38     	; 0x1054 <__udivmodsi4_loop>
    107a:	60 95       	com	r22
    107c:	70 95       	com	r23
    107e:	80 95       	com	r24
    1080:	90 95       	com	r25
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	bd 01       	movw	r22, r26
    1088:	cf 01       	movw	r24, r30
    108a:	08 95       	ret

0000108c <itoa>:
    108c:	fb 01       	movw	r30, r22
    108e:	9f 01       	movw	r18, r30
    1090:	e8 94       	clt
    1092:	42 30       	cpi	r20, 0x02	; 2
    1094:	bc f0       	brlt	.+46     	; 0x10c4 <itoa+0x38>
    1096:	45 32       	cpi	r20, 0x25	; 37
    1098:	ac f4       	brge	.+42     	; 0x10c4 <itoa+0x38>
    109a:	4a 30       	cpi	r20, 0x0A	; 10
    109c:	29 f4       	brne	.+10     	; 0x10a8 <itoa+0x1c>
    109e:	97 fb       	bst	r25, 7
    10a0:	1e f4       	brtc	.+6      	; 0x10a8 <itoa+0x1c>
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	64 2f       	mov	r22, r20
    10aa:	77 27       	eor	r23, r23
    10ac:	b9 df       	rcall	.-142    	; 0x1020 <__udivmodhi4>
    10ae:	80 5d       	subi	r24, 0xD0	; 208
    10b0:	8a 33       	cpi	r24, 0x3A	; 58
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <itoa+0x2a>
    10b4:	89 5d       	subi	r24, 0xD9	; 217
    10b6:	81 93       	st	Z+, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	a9 f7       	brne	.-22     	; 0x10a8 <itoa+0x1c>
    10be:	16 f4       	brtc	.+4      	; 0x10c4 <itoa+0x38>
    10c0:	5d e2       	ldi	r21, 0x2D	; 45
    10c2:	51 93       	st	Z+, r21
    10c4:	10 82       	st	Z, r1
    10c6:	c9 01       	movw	r24, r18
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <strrev>

000010ca <strrev>:
    10ca:	dc 01       	movw	r26, r24
    10cc:	fc 01       	movw	r30, r24
    10ce:	67 2f       	mov	r22, r23
    10d0:	71 91       	ld	r23, Z+
    10d2:	77 23       	and	r23, r23
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <strrev+0x4>
    10d6:	32 97       	sbiw	r30, 0x02	; 2
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <strrev+0x18>
    10da:	7c 91       	ld	r23, X
    10dc:	6d 93       	st	X+, r22
    10de:	70 83       	st	Z, r23
    10e0:	62 91       	ld	r22, -Z
    10e2:	ae 17       	cp	r26, r30
    10e4:	bf 07       	cpc	r27, r31
    10e6:	c8 f3       	brcs	.-14     	; 0x10da <strrev+0x10>
    10e8:	08 95       	ret

000010ea <_exit>:
    10ea:	f8 94       	cli

000010ec <__stop_program>:
    10ec:	ff cf       	rjmp	.-2      	; 0x10ec <__stop_program>
